<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Beerlington]]></title>
  <link href="http://beerlington.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://beerlington.github.io/"/>
  <updated>2013-12-31T21:18:39-05:00</updated>
  <id>http://beerlington.github.io/</id>
  <author>
    <name><![CDATA[Peter Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Custom Rspec Generator]]></title>
    <link href="http://beerlington.github.io/blog/2013/06/23/creating-a-custom-rspec-generator/"/>
    <updated>2013-06-23T12:43:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/06/23/creating-a-custom-rspec-generator</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a huge proponent of test driven development and have been feeling
sort of guilty about a gem that I wrote which does not encourage
testing whatsoever. The gem, <a href="https://github.com/beerlington/classy_enum">ClassyEnum</a>,
provides class-based enumerator functionality on top of Active Record. This blog post is not so much
about the gem itself, so If you&rsquo;re interested in reading more about it,
the <a href="http://beerlington.com/classy_enum/">README</a> has some good examples.</p>

<p>Historically, ClassyEnum has had a built-in generator to
quickly create classes that represent enum members. While this has served me
well, it has never generated any spec files along with these classes.
I always end up either creating them manually, or just forgoing tests
altogether. Neither option was great, so I wanted to see what it would
take to create spec files automatically, similar to how Rails can
generate model specs when using the model or scaffold generators.</p>

<p>When ClassyEnum is installed in your Rails project, you can run the generator like so:</p>

<p>```irb
$ rails g classy_enum Priority low medium high</p>

<pre><code>  create  app/enums
  create  app/enums/priority.rb
</code></pre>

<p>```</p>

<p>Which produces the following file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My Project &ndash; app/enums/priority.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Priority</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ClassyEnum</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Priority::Low &amp;lt; Priority</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Priority</span><span class="o">::</span><span class="no">Medium</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Priority</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Priority::High &amp;lt; Priority</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each Priority subclass represents an enum member, and behaves like a
true Ruby class. This boilerplate code starts out innocent enough,
as most code does, but over time, I find myself adding logic
and properties to these classes. Depending on how lazy I am,
sometimes I test it, sometimes I don&rsquo;t.</p>

<h2>Exploring the Un<em>spec</em>tacular Generator</h2>

<p>The code for the &ldquo;main&rdquo; generator in ClassyEnum is fairly straightforward. It
has a description, takes a few arguments, and copies a dynamically generated
file into app/enums, creating the directory if it does not exist.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ClassyEnum Enum Generator &ndash; lib/generators/classy_enum/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ClassyEnumGenerator</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">NamedBase</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Generate</span> <span class="n">a</span> <span class="no">ClassyEnum</span> <span class="n">definition</span> <span class="k">in</span> <span class="n">app</span><span class="o">/</span><span class="n">enums</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  argument :name, :type =&gt; :string, :required =&gt; true, :banner =&gt; &amp;lsquo;EnumName&amp;rsquo;</span>
</span><span class='line'><span class="sr">  argument :values, :type =&gt; :array, :default =&gt; [], :banner =&gt; &amp;lsquo;value1 value2 value3 etc&amp;hellip;&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">source_root</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">copy_files</span> <span class="c1"># :nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">empty_directory</span> <span class="s1">&#39;app/enums&#39;</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;enum.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;app/enums/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I would recommend the <a href="http://guides.rubyonrails.org/generators.html">Rails Generator Guide</a>
if you aren&rsquo;t familiar with the syntax. You may also want to read the
<a href="http://rdoc.info/github/wycats/thor/master/Thor/Actions.html">Thor documentation</a>
which is the foundation for the Rails generator DSL.</p>

<h2>Making the Generator <em>Spec</em>tacular</h2>

<p>I had four main requirements for my generator&rsquo;s new behavior:</p>

<ol>
<li>It must automatically create specs in spec/enums when the generator
is run.</li>
<li>The specs it creates must work out of the box (even if they are
pending).</li>
<li>It cannot break existing behavior.</li>
<li>It must be future proof by not relying on or hacking internal Rails or Rspec code</li>
</ol>


<p>After digging around on Stack Overflow and reading the Rails Guide,
I discovered that Rails exposes a <a href="http://api.rubyonrails.org/classes/Rails/Generators/Base.html#method-c-hook_for"><code>hook_for</code></a>
method. When passed the <code>:test_framework</code> argument,
the main generator can automatically figure out which test framework your application is
using, and based on naming conventions, which spec generator to load.
All I had to do was add the hook to my existing generator, and create
some support files to go along with it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ClassyEnum Enum Generator with hook &ndash; lib/generators/rspec/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ClassyEnumGenerator</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">NamedBase</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Generate</span> <span class="n">a</span> <span class="no">ClassyEnum</span> <span class="n">definition</span> <span class="k">in</span> <span class="n">app</span><span class="o">/</span><span class="n">enums</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  argument :name, :type =&gt; :string, :required =&gt; true, :banner =&gt; &amp;lsquo;EnumName&amp;rsquo;</span>
</span><span class='line'><span class="sr">  argument :values, :type =&gt; :array, :default =&gt; [], :banner =&gt; &amp;lsquo;value1 value2 value3 etc&amp;hellip;&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">source_root</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">copy_files</span> <span class="c1"># :nodoc:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">empty_directory</span> <span class="s1">&#39;app/enums&#39;</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;enum.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;app/enums/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  hook_for :test_framework # &amp;lt;======= Add the hook here</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>More information about this hook can be found in the
<a href="http://guides.rubyonrails.org/generators.html#customizing-your-workflow">&ldquo;Customizing Your Workflow&rdquo;</a>
section of the Rails Guide.</p>

<p>After adding just the hook, I knew it wasn&rsquo;t going to work, but because I like
taking baby steps when coding, I rebuilt and
installed the gem, updated my project&rsquo;s ClassyEnum dependency,
and ran the generator anyway:</p>

<p>```irb
rails g classy_enum Priority low medium high</p>

<pre><code>  create  app/enums
  create  app/enums/priority.rb
   error  rspec [not found]
</code></pre>

<p>```</p>

<p>This error is just saying that the test_framework generator could
not be found, which was expected because I had not created it yet.
Since I don&rsquo;t have any tests for the generator itself, I used this message
as a failing test, and my passing test would be when the enum spec was generated.</p>

<p>According to the Rails Guide, the <code>hook_for</code> method will search in a
few places for the generator, looking for one of a few different
class names. By default it looks for a class named after the generator that
invoked the hook, namespaced with the test framework&rsquo;s class name and &ldquo;Generators&rdquo;.
In my case this would be <code>Rspec::Generators::ClassyEnumGenerator</code>.
I could have alternatively used the <code>:as =&gt;</code> option to specify
a different class name, but I wanted to use the default.</p>

<p>I needed the behavior of the enum spec generator to basically mimic that
of my enum class generator, the only difference being the spec location
and which template was used. My final Rspec generator class is shown
here:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ClassyEnum Rspec Generator &ndash; lib/generators/rspec/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Rspec</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Generators</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class ClassyEnumGenerator &amp;lt; Rails::Generators::NamedBase</span>
</span><span class='line'><span class="sr">  desc &quot;Generate a ClassyEnum spec in spec/enums</span><span class="o">/</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  argument :name, :type =&amp;gt; :string, :required =&amp;gt; true, :banner =&amp;gt; &#39;EnumName&#39;</span>
</span><span class='line'><span class="s2">  argument :values, :type =&amp;gt; :array, :default =&amp;gt; [], :banner =&amp;gt; &#39;value1 value2 value3 etc...&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  source_root File.expand_path(&quot;</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">templates</span><span class="s2">&quot;, __FILE__)</span>
</span><span class='line'>
</span><span class='line'><span class="s2">  def copy_files # :nodoc:</span>
</span><span class='line'><span class="s2">    empty_directory &#39;spec/enums&#39;</span>
</span><span class='line'><span class="s2">    template &quot;</span><span class="n">enum_spec</span><span class="o">.</span><span class="n">rb</span><span class="s2">&quot;, &quot;</span><span class="n">spec</span><span class="o">/</span><span class="n">enums</span><span class="o">/</span><span class="c1">#{file_name}_spec.rb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And the spec template file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/generators/rspec/templates/enum_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spec_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="n">values</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">describe &amp;lt;%= &amp;ldquo;</span><span class="si">#{</span><span class="n">class_name</span><span class="si">}</span><span class="sx">::</span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">camelize</span><span class="si">}</span><span class="sx">&amp;rdquo; %&gt;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">add</span> <span class="n">some</span> <span class="n">examples</span> <span class="n">to</span> <span class="p">(</span><span class="ow">or</span> <span class="n">delete</span><span class="p">)</span> <span class="c1">#{&lt;strong&gt;FILE&lt;/strong&gt;}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%&amp;ndash; end &amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>After adding these two files to ClassyEnum, I reinstalled and
reran the generator in my project and everything worked!</p>

<p>Here is my &ldquo;passing&rdquo; test:</p>

<p>```irb
rails g classy_enum Priority low medium high</p>

<pre><code>  create  app/enums
  create  app/enums/priority.rb
  invoke  rspec
  create    spec/enums
  create    spec/enums/priority_spec.rb
</code></pre>

<p>```</p>

<p>Which generates the following spec file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>My Project &ndash; spec/enums/priority_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spec_helper</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe Priority::Low do</span>
</span><span class='line'><span class="sr">  pending &amp;ldquo;add some examples to (or delete) </span><span class="si">#{</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;}&amp;rdquo;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">describe</span> <span class="ss">Priority</span><span class="p">:</span><span class="ss">:Medium</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">add</span> <span class="n">some</span> <span class="n">examples</span> <span class="n">to</span> <span class="p">(</span><span class="ow">or</span> <span class="n">delete</span><span class="p">)</span> <span class="c1">#{&lt;strong&gt;FILE&lt;/strong&gt;}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;describe Priority::High do</span>
</span><span class='line'><span class="sr">  pending &amp;ldquo;add some examples to (or delete) </span><span class="si">#{</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="no">FILE</span><span class="o">&lt;</span><span class="sr">/strong&gt;}&amp;rdquo;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Since I am using the hook_for method, it includes some other behavior,
such as supporting the <code>--skip-test-framework</code> flag out of the box. This
would allow someone to generate the enum classes without any specs, but
I don&rsquo;t recommend doing that. :)</p>

<h2>Wrapping Up</h2>

<p>I&rsquo;m happy with ClassyEnum generator once again. It creates spec files by
default which makes me feel like I&rsquo;m able to practice what I preach. I
was able to achieve all four of my goals without any crazy hacks or making
any sacrifices. I was also able to easily add support for TestUnit by
adding an additional generator and template file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simplified Query Interface for Relationships in Active Record 4]]></title>
    <link href="http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4/"/>
    <updated>2013-03-10T14:42:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4</id>
    <content type="html"><![CDATA[<p>```ruby</p>

<h1>Rails 4 now lets you simplify &ldquo;belongs_to&rdquo; association queries:</h1>

<h1>Before</h1>

<p>Post.where(author_id: @author)
Image.where(imageable_id: @cat, imageable_type: &lsquo;Cat&rsquo;)</p>

<h1>After</h1>

<p>Post.where(author: @author)
Image.where(imageable: @cat)
```</p>

<p>About six months ago I added a <a href="https://github.com/rails/rails/pull/7273">new feature to Active Record</a>
that allows you to write simpler queries across associated models. Compared to many of
the other <a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">new features in Rails 4</a>,
this isn&rsquo;t a significant change, however I think it&rsquo;s pretty
handy so I wanted to talk about it and show some examples. Other than a
<a href="http://contributors.rubyonrails.org/contributors/pete-brown/commits">few small bug fixes</a>,
this was my first real contribution to Rails, and the experience was enlightening
(saving that for another post).</p>

<h2>It&rsquo;s All About the Interface</h2>

<p>Prior to this change, any queries that used a foreign key column were required
to specify the actual column name as the hash key in the query. The biggest
problem I had with this approach is that it wasn&rsquo;t consistent with other
Active Record APIs. When I&rsquo;m working with models, I tend to be thinking in
terms of relationships and objects as opposed to database columns.</p>

<p>Take the following example from Rails 3.x where you can build new
objects using the <code>belongs_to</code> relationship, but you cannot query with this
relationship. When you are querying, you need to shift into an object + database
hybrid mindset:</p>

<p>```ruby
class Post &lt; ActiveRecord::Base
  belongs_to :author
end</p>

<h1>Creating related objects using the model association:</h1>

<p>Post.new(author: Author.first)</p>

<h1>Does NOT work in Rails 3.x</h1>

<p>Post.where(author: Author.first) # => NOPE!</p>

<h1>Must specify foreign key to make query work in Rails 3.x</h1>

<p>Post.where(author_id: Author.first) # => Yup!
```</p>

<p>In the above example, I am specifying the foreign key on one side, and the object on the other.
I think it can be hard to remember when you can use the associations and when
you can&rsquo;t. Obviously a more practical approach would be to use <code>Author.first.posts</code>,
but this gives flexibility in cases where you might not have both sides of the
relationship fully setup.</p>

<p>The above example may seem trivial so here&rsquo;s an example using a
non-conventional relationship:</p>

<p>```ruby
class Post &lt; ActiveRecord::Base
  belongs_to :writer, class_name: &lsquo;Author&rsquo;, foreign_key: &lsquo;author_id&rsquo;
end</p>

<h1>Ah crap&hellip; I forgot what my foreign key was called!</h1>

<p>Post.where(writer_id: Author.first) # => NOPE!</p>

<h1>Must still specify foreign key column here</h1>

<p>Post.where(author_id: Author.first) # => Yup!
```</p>

<p>This issue becomes even more apparent when working with polymorphic relationships:</p>

<p>```ruby
class Cat &lt; ActiveRecord::Base
  has_many :images, as: :imageable, dependent: :destroy
end</p>

<p>class Image &lt; ActiveRecord::Base
  belongs_to :imageable, polymorphic: true
end</p>

<p>Image.where(imageable_id: Cat.first, imageable_type: &lsquo;Cat&rsquo;)
```</p>

<h2>Striving for Consistency</h2>

<p>After seeing a few <a href="https://github.com/rails/rails/issues/1736">different</a>
<a href="https://github.com/rails/rails/issues/5067">issues</a> get opened, I realized
I wasn&rsquo;t the only one who felt this inconsistency was unintuitive. It was
causing enough confusion that people were reporting it as a bug,
convinced that it &ldquo;used to work&rdquo;.  This clearly wasn&rsquo;t a bug, and at some
point an unintuitive interface needs to be addressed.</p>

<p>I hadn&rsquo;t spend a ton of time in the Active Record internals so I decided
to dive in and see if I could change the API so it worked with the relationship
name. I knew that each Active Record model tracks its relationships with other
models using &ldquo;reflections&rdquo;. Each reflection stores various properies such as the
relationship name and macro (ie belongs_to, has_many, etc).</p>

<p><code>irb
1.9.3-p327 :007 &gt; Author.reflections
 =&gt; {:posts=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf391dc28 @macro=:has_many, @name=:posts, @options={:extend=&gt;[]}, @active_record=Author(id: integer, name: string, created_at: datetime, updated_at: datetime), @plural_name="posts", @collection=true&gt;}
1.9.3-p327 :008 &gt; Post.reflections
 =&gt; {:author=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf4c1afb0 @macro=:belongs_to, @name=:author, @options={}, @active_record=Post(id: integer, body: text, author_id: integer, created_at: datetime, updated_at: datetime), @plural_name="authors", @collection=false&gt;}
</code></p>

<p>As I dove further into the Active Record internals, I found the
<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/predicate_builder.rb">ActiveRecord::PredicateBuilder</a>
which is used for building the &ldquo;WHERE&rdquo; clause of every Active Record
query. It was not the most straightforward class I&rsquo;ve worked with, but
the integration tests were good so I could do some exploratory testing
and know when I had broken something. After a few days of discussing
with the Rails core team about what behavior should be implemented, I
had some <a href="https://github.com/rails/rails/commit/3da275c4396d7fad250d2b786027ba4f14344bd4">working code</a>.</p>

<h2>Conclusion</h2>

<p>In the end, the changes I made to the predicate builder allow you to query across a
belong_to relationship without specifying the foreign key. Does it
enable you to do something you couldn&rsquo;t do before? Not really, however, bringing
more consistency to the API was my main goal.</p>

<p>Now that <a href="http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/">Rails 4 beta has been released</a>
I encourage people to download it today and try out some simple examples:</p>

<p><code>ruby
Post.where(author: @author)
Image.where(imageable: @cat) # =&gt; Polymorphic!
</code></p>

<p>I also recommend checking out the <a href="https://github.com/rails/rails/blob/master/activerecord/test/cases/relation/where_test.rb#L26-L81">Active Record tests</a>
for some more complex examples of how it can be used with polymorphic
relationships and single-table inheritance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Custom CSV Renderer in Rails 3]]></title>
    <link href="http://beerlington.github.io/blog/2011/07/25/building-a-csv-renderer-in-rails-3/"/>
    <updated>2011-07-25T22:18:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2011/07/25/building-a-csv-renderer-in-rails-3</id>
    <content type="html"><![CDATA[<p>This post will walk you through creating a simple renderer in Rails
3.</p>

<h2>What are renderers?</h2>

<p>A renderer in Rails is a way of customizing how content is rendered for
the browser or any client interacting with your web service. Rails has
a handful of built in rendering formats such as <em>html</em>, <em>xml</em>, and
<em>json</em>, and exposes an effortless method for adding additional custom rendering
functionality that can be shared among your controllers and
applications.</p>

<p>Custom renderers provide a standard, reusable interface for rendering content,
in turn allowing you to DRY up your application logic architecture.
This post will show you how to add a custom renderer that converts
ActiveRecord collections to a downloadable CSV format.</p>

<p>Below is an example of how the final CSV renderer will be used:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>CSV rendering from a controller &ndash; app/locations_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@locations = Location.all</span>
</span><span class='line'>
</span><span class='line'><span class="sr">respond_to do |format|</span>
</span><span class='line'><span class="sr">  format.html</span>
</span><span class='line'><span class="sr">  format.csv  { render :csv =&amp;gt; @locations, :except =&amp;gt; [:id] }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Some background info:</h2>

<p>Before getting started with our CSV renderer, let&rsquo;s look at the
<a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/renderers.rb">Rails source</a>
to see how it defines its own custom renderers:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>actionpack/lib/action_controller/metal/renderers.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ActionController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_renderer</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Renderers.add(key, &amp;amp;block)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">module</span> <span class="nn">Renderers</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Lots of ommitted code...</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def self.add(key, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  define_method(&quot;_render_option_</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="sr">&quot;, &amp;amp;block)</span>
</span><span class='line'><span class="sr">  RENDERERS[key] = block</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># More ommitted code...</span>
</span><span class='line'>
</span><span class='line'><span class="sr">add :xml do |xml, options|</span>
</span><span class='line'><span class="sr">  self.content_type ||= Mime::XML</span>
</span><span class='line'><span class="sr">  xml.respond_to?(:to_xml) ? xml.to_xml(options) : xml</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>At the top you see an <em>add_renderer</em> method, which will be our
interface to add a custom renderer. Ignoring the fact that
I&rsquo;ve removed some of the implementation details,
further down you see a class method called <em>add</em> which does two things:
1) It defines an internal method used by the rendering stack,
and 2) stores the key (:xml, :json, etc) in a hash.</p>

<p>As we move to the bottom of this file, you&rsquo;ll see where <em>add</em> is being used
to define an XML renderer. This method takes a block with two arguments.
The first argument is an object that responds to <em>to_xml</em>, and the second
is a set of options that are passed as arguments to <em>to_xml</em>. If for some reason
the object doesn&rsquo;t respond to <em>to_xml</em> then it simply returns itself.</p>

<p>If you&rsquo;ve ever used the Rails scaffold generator, you will notice that
it includes code for responding to XML requests:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>default scaffolded controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@location</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  respond_to do |format|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># show.html.erb</span>
</span><span class='line'><span class="nb">format</span><span class="o">.</span><span class="n">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="vi">@location</span> <span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This is exacly what adding the XML renderer has provided, a clean syntax
for allowing the server to respond with XML formatted data.</p>

<h2>Why should I use it?</h2>

<p>Let&rsquo;s say you have a <em>Location</em> model with the
following schema:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db/schema.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:version</span> <span class="o">=&gt;</span> <span class="mi">20110726022558</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">locations</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:force</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;t.string   &quot;name&quot;</span>
</span><span class='line'><span class="sr">t.string   &quot;address&quot;</span>
</span><span class='line'><span class="sr">t.string   &quot;city&quot;</span>
</span><span class='line'><span class="sr">t.string   &quot;state&quot;</span>
</span><span class='line'><span class="sr">t.string   &quot;zip&quot;</span>
</span><span class='line'><span class="sr">t.datetime &quot;created_at&quot;</span>
</span><span class='line'><span class="sr">t.datetime &quot;updated_at&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Although your main application may use all of these fields, you might need to
import this data into some sort of enterprise/exchange-powered legacy
system in CSV format. You could easily define a <em>to_csv</em> class method on your
Location model and just call that from the controller, but that presents
a few problems. The Location model shouldn&rsquo;t know anything
about converting itself to a CSV format because this violates the rule that
components should have a single, well-defined purpose. Also, what if you want to
download other models in CSV format? These are problems that respond_to and render
aim to solve.</p>

<h2>How does it work?</h2>

<p>Looking back to the first code snippet I posted, you can see that the
CSV render syntax in my controller is very similar to the XML render syntax. The only difference is
that our CSV format allows you to specify which columns (attributes) you
want to include or exclude in the downloaded CSV file. This detail has
almost nothing to do with the renderer itself, and is implemented by
the object&rsquo;s Array class, as shown below.</p>

<p>To understand how this works, let&rsquo;s look at our custom CSV renderer:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>csv_renderer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">action_controller</span><span class="o">/</span><span class="n">metal</span><span class="o">/</span><span class="n">renderers</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ActionController.add_renderer :csv do |csv, options|</span>
</span><span class='line'><span class="sr">  self.response_body = csv.respond_to?(:to_csv) ? csv.to_csv(options) : csv</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You will notice a few differences between our custom renderer
and the XML renderer defined by Rails. First, we are using
<em>add_renderer</em> as opposed to just <em>add</em>. This is a personal preference
as you can also use: <code>ActionController::Renderers.add
:csv</code>. Both methods accomplish exactly the same thing, but I find
<em>add_renderer</em> to be slightly more readable.
Second, we are not setting the content_type. The
reason for this is because Rails automatically adds a CSV Mime Type
within the action_pack library. I&rsquo;m not going to go into the details of how that
works, but feel free to <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/mime_types.rb">explore the complete list of Mime Types</a>.
The last detail to note is that we are requiring
<em>action_controller/metal/renderers</em> which provides us access to the <em>add_renderer</em>
method. You could alternatively require any module that inclues this
file, such as <em>action_controller/base</em> if you need access to methods like
<a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html#method-i-send_data">send_data</a>.</p>

<p>Finally, let&rsquo;s look at the <em>to_csv</em> Array method. The
reason this method is defined on Array is because ActiveRecord converts
collection queries such as <code>Location.where(:state =&gt; 'vt')</code> or <code>Location.all</code>
to arrays.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Array</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Converts an array to CSV formatted string</span>
</span><span class='line'><span class="sr">  # Options include:</span>
</span><span class='line'><span class="sr">  # :only =&gt; [:col1, :col2] # Specify which columns to include</span>
</span><span class='line'><span class="sr">  # :except =&gt; [:col1, :col2] # Specify which columns to exclude</span>
</span><span class='line'><span class="sr">  # :add_methods =&gt; [:method1, :method2] # Include addtional methods that aren&amp;rsquo;t columns</span>
</span><span class='line'><span class="sr">  def to_csv(options={})&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">return</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">empty?</span>
</span><span class='line'><span class="k">return</span> <span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="k">unless</span> <span class="n">first</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:column_names</span>
</span><span class='line'>
</span><span class='line'><span class="n">columns</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">column_names</span>
</span><span class='line'><span class="n">columns</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">]</span>
</span><span class='line'><span class="n">columns</span> <span class="o">-=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">]</span>
</span><span class='line'><span class="n">columns</span> <span class="o">+=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:add_methods</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:add_methods</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">csv</span> <span class="o">=</span> <span class="o">[</span><span class="n">columns</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'><span class="n">csv</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">columns</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">csv</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Above we can see that <em>to_csv</em> takes a hash of options which are used to
determine which columns should be included in the CSV file. One
option <code>:only =&gt; [:col1, :col2]</code> allows you to specify the exact
columns you want included, another option, <code>:except =&gt; [:col1, :col2]</code>,
allows you to specify which columns you DO NOT want to include, and the
last option, <code>:add_methods =&gt; [:method1, :method2]</code> allows you to add
data defined in methods that aren&rsquo;t saved in the database. Calling
<em>to_csv</em> without any arguments will include all columns.</p>

<h2>Usage examples:</h2>

<p>Tying that all together, we can now use this renderer in our controllers
to let users or clients download CSV data. Here are a few examples:</p>

<h3>Generate a CSV that includes every column:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@locations = Location.all</span>
</span><span class='line'>
</span><span class='line'><span class="sr">respond_to do |format|</span>
</span><span class='line'><span class="sr">  format.csv  { render :csv =&amp;gt; @locations }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Generate a CSV that includes every column except the id:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@locations = Location.all</span>
</span><span class='line'>
</span><span class='line'><span class="sr">respond_to do |format|</span>
</span><span class='line'><span class="sr">  format.csv  { render :csv =&amp;gt; @locations, :except =&amp;gt; [:id] }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Generate a CSV that includes only the state and zipcode:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@locations = Location.all</span>
</span><span class='line'>
</span><span class='line'><span class="sr">respond_to do |format|</span>
</span><span class='line'><span class="sr">  format.csv  { render :csv =&amp;gt; @locations, :only =&amp;gt; [:state, :zip] }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Generate a CSV that adds a model method:</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@locations = Location.all</span>
</span><span class='line'>
</span><span class='line'><span class="sr">respond_to do |format|</span>
</span><span class='line'><span class="sr">  format.csv  { render :csv =&amp;gt; @locations, :add_methods =&amp;gt; [:my_method] }</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Finishing up</h2>

<p>This post walked you through a simple yet practical approach to building
a custom Rails renderer in Rails 3. While it may be overkill for one-off
uses in a small code base, it shows it&rsquo;s true potential in large
applications by helping prevent redundant code, and for building APIs that may need to
respond to formats other than JSON and XML.</p>

<h2>Additional Resources</h2>

<p>All the code used in this post was developed for a RubyGem called <a href="https://github.com/beerlington/render_csv">render_csv</a>.
For more information about renderers and the Rails rendering stack, I highly recommend
<a href="http://pragprog.com/book/jvrails/crafting-rails-applications">Crafting Rails Applications</a>
 by <a href="https://twitter.com/josevalim">José Valim</a>. Also, the <a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts and Rendering Rails Guide</a>
provides a comprehensive overview of rendering in controllers as well as
views.</p>
]]></content>
  </entry>
  
</feed>
