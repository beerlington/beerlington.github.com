<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: active-record | Beerlington]]></title>
  <link href="http://beerlington.github.io/blog/categories/active-record/atom.xml" rel="self"/>
  <link href="http://beerlington.github.io/"/>
  <updated>2013-12-31T21:18:39-05:00</updated>
  <id>http://beerlington.github.io/</id>
  <author>
    <name><![CDATA[Peter Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Simplified Query Interface for Relationships in Active Record 4]]></title>
    <link href="http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4/"/>
    <updated>2013-03-10T14:42:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4</id>
    <content type="html"><![CDATA[<p>```ruby</p>

<h1>Rails 4 now lets you simplify &ldquo;belongs_to&rdquo; association queries:</h1>

<h1>Before</h1>

<p>Post.where(author_id: @author)
Image.where(imageable_id: @cat, imageable_type: &lsquo;Cat&rsquo;)</p>

<h1>After</h1>

<p>Post.where(author: @author)
Image.where(imageable: @cat)
```</p>

<p>About six months ago I added a <a href="https://github.com/rails/rails/pull/7273">new feature to Active Record</a>
that allows you to write simpler queries across associated models. Compared to many of
the other <a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">new features in Rails 4</a>,
this isn&rsquo;t a significant change, however I think it&rsquo;s pretty
handy so I wanted to talk about it and show some examples. Other than a
<a href="http://contributors.rubyonrails.org/contributors/pete-brown/commits">few small bug fixes</a>,
this was my first real contribution to Rails, and the experience was enlightening
(saving that for another post).</p>

<h2>It&rsquo;s All About the Interface</h2>

<p>Prior to this change, any queries that used a foreign key column were required
to specify the actual column name as the hash key in the query. The biggest
problem I had with this approach is that it wasn&rsquo;t consistent with other
Active Record APIs. When I&rsquo;m working with models, I tend to be thinking in
terms of relationships and objects as opposed to database columns.</p>

<p>Take the following example from Rails 3.x where you can build new
objects using the <code>belongs_to</code> relationship, but you cannot query with this
relationship. When you are querying, you need to shift into an object + database
hybrid mindset:</p>

<p>```ruby
class Post &lt; ActiveRecord::Base
  belongs_to :author
end</p>

<h1>Creating related objects using the model association:</h1>

<p>Post.new(author: Author.first)</p>

<h1>Does NOT work in Rails 3.x</h1>

<p>Post.where(author: Author.first) # => NOPE!</p>

<h1>Must specify foreign key to make query work in Rails 3.x</h1>

<p>Post.where(author_id: Author.first) # => Yup!
```</p>

<p>In the above example, I am specifying the foreign key on one side, and the object on the other.
I think it can be hard to remember when you can use the associations and when
you can&rsquo;t. Obviously a more practical approach would be to use <code>Author.first.posts</code>,
but this gives flexibility in cases where you might not have both sides of the
relationship fully setup.</p>

<p>The above example may seem trivial so here&rsquo;s an example using a
non-conventional relationship:</p>

<p>```ruby
class Post &lt; ActiveRecord::Base
  belongs_to :writer, class_name: &lsquo;Author&rsquo;, foreign_key: &lsquo;author_id&rsquo;
end</p>

<h1>Ah crap&hellip; I forgot what my foreign key was called!</h1>

<p>Post.where(writer_id: Author.first) # => NOPE!</p>

<h1>Must still specify foreign key column here</h1>

<p>Post.where(author_id: Author.first) # => Yup!
```</p>

<p>This issue becomes even more apparent when working with polymorphic relationships:</p>

<p>```ruby
class Cat &lt; ActiveRecord::Base
  has_many :images, as: :imageable, dependent: :destroy
end</p>

<p>class Image &lt; ActiveRecord::Base
  belongs_to :imageable, polymorphic: true
end</p>

<p>Image.where(imageable_id: Cat.first, imageable_type: &lsquo;Cat&rsquo;)
```</p>

<h2>Striving for Consistency</h2>

<p>After seeing a few <a href="https://github.com/rails/rails/issues/1736">different</a>
<a href="https://github.com/rails/rails/issues/5067">issues</a> get opened, I realized
I wasn&rsquo;t the only one who felt this inconsistency was unintuitive. It was
causing enough confusion that people were reporting it as a bug,
convinced that it &ldquo;used to work&rdquo;.  This clearly wasn&rsquo;t a bug, and at some
point an unintuitive interface needs to be addressed.</p>

<p>I hadn&rsquo;t spend a ton of time in the Active Record internals so I decided
to dive in and see if I could change the API so it worked with the relationship
name. I knew that each Active Record model tracks its relationships with other
models using &ldquo;reflections&rdquo;. Each reflection stores various properies such as the
relationship name and macro (ie belongs_to, has_many, etc).</p>

<p><code>irb
1.9.3-p327 :007 &gt; Author.reflections
 =&gt; {:posts=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf391dc28 @macro=:has_many, @name=:posts, @options={:extend=&gt;[]}, @active_record=Author(id: integer, name: string, created_at: datetime, updated_at: datetime), @plural_name="posts", @collection=true&gt;}
1.9.3-p327 :008 &gt; Post.reflections
 =&gt; {:author=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf4c1afb0 @macro=:belongs_to, @name=:author, @options={}, @active_record=Post(id: integer, body: text, author_id: integer, created_at: datetime, updated_at: datetime), @plural_name="authors", @collection=false&gt;}
</code></p>

<p>As I dove further into the Active Record internals, I found the
<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/predicate_builder.rb">ActiveRecord::PredicateBuilder</a>
which is used for building the &ldquo;WHERE&rdquo; clause of every Active Record
query. It was not the most straightforward class I&rsquo;ve worked with, but
the integration tests were good so I could do some exploratory testing
and know when I had broken something. After a few days of discussing
with the Rails core team about what behavior should be implemented, I
had some <a href="https://github.com/rails/rails/commit/3da275c4396d7fad250d2b786027ba4f14344bd4">working code</a>.</p>

<h2>Conclusion</h2>

<p>In the end, the changes I made to the predicate builder allow you to query across a
belong_to relationship without specifying the foreign key. Does it
enable you to do something you couldn&rsquo;t do before? Not really, however, bringing
more consistency to the API was my main goal.</p>

<p>Now that <a href="http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/">Rails 4 beta has been released</a>
I encourage people to download it today and try out some simple examples:</p>

<p><code>ruby
Post.where(author: @author)
Image.where(imageable: @cat) # =&gt; Polymorphic!
</code></p>

<p>I also recommend checking out the <a href="https://github.com/rails/rails/blob/master/activerecord/test/cases/relation/where_test.rb#L26-L81">Active Record tests</a>
for some more complex examples of how it can be used with polymorphic
relationships and single-table inheritance.</p>
]]></content>
  </entry>
  
</feed>
