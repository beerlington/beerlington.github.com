<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Beerlington]]></title>
  <link href="http://beerlington.github.io/atom.xml" rel="self"/>
  <link href="http://beerlington.github.io/"/>
  <updated>2013-12-31T21:18:39-05:00</updated>
  <id>http://beerlington.github.io/</id>
  <author>
    <name><![CDATA[Peter Brown]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Year in Review]]></title>
    <link href="http://beerlington.github.io/blog/2013/12/31/my-year-in-review/"/>
    <updated>2013-12-31T19:22:00-05:00</updated>
    <id>http://beerlington.github.io/blog/2013/12/31/my-year-in-review</id>
    <content type="html"><![CDATA[<script async src="http://beerlington.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I&rsquo;ve seen a few great posts today from people reflecting on some of their
accomplishments and favorite things from 2013, so I was inspired to put
something together myself. Instead of just listing things off, I thought
it would be fun to go through <a href="https://twitter.com/beerlington">my Twitter feed</a>
and pull out some of my favorite tweets. Some of them were
accomplishments, others were fun things I did, and some were just
ridiculous things that popped into my head. Hope you enjoy!</p>

<h2>On Quitting My Job</h2>

<p>The end of 2012 was not a great time for me. Lots of things were going
well in my life, but I knew I was not happy at my current job. I wasn&rsquo;t
learning anything, I was constantly frustrated, and to be honest, I was
pretty depressed. I decided to quit my job and form a partnership with
some of my coworkers doing contract web development through our <a href="http://agilion.com/">own company</a>.</p>

<p>This was exactly the change that I needed. Working remotely has had a
hugely positive impact on my life. It&rsquo;s given me freedom and
flexibility, challenged me with new and exciting projects,
and just made me an overall happier person. I live in VT for the quality
of life, and now I feel like I am able to enjoy it more than ever.</p>

<blockquote class="twitter-tweet" lang="en"><p>The best part about working from home is that you don&#39;t have to have any friends to be the most popular guy at the office.</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/395874679744770048">October 31, 2013</a></blockquote>


<h2>On Having a Sick Dog</h2>

<p>The beginning of 2013 was an exciting time for me with the new job,
however, my dog got really sick the week I started. We didn&rsquo;t know what
was wrong with him for a few days. Then finally&hellip;</p>

<blockquote class="twitter-tweet" lang="en"><p>Sick dog mystery solved! Apparently his digestive system was no match for a 4 inch pine cone. Hoping for a quick recovery :)</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/292772738689560576">January 19, 2013</a></blockquote>


<p>The poor guy had to spend the evening at the emergency vet recovering,
making sure he didn&rsquo;t have any real damage from the pine cone. He
did make a swift recovery though, and was back on his feet in no time.</p>

<blockquote class="twitter-tweet" lang="en"><p>Nothing beats a Saturday night at the emergency vet :( <a href="http://t.co/C5aJjsyJ">pic.twitter.com/C5aJjsyJ</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/292857981207474176">January 20, 2013</a></blockquote>


<h2>On Feeling Better</h2>

<p>Speaking of not feeling well, I gave up dairy in the fall of 2012.
It wasn&rsquo;t something I wanted to do, but was something I needed to do. I had been feeling sick on and off for
a number of years, and finally decided enough was enough, and gave it up
entirely. 2013 was the first full year on a dairy free diet and I can
truly say I&rsquo;ve never felt this well in my entire life. I&rsquo;ve lost a ton of
weight and am cold pretty much constantly, but it&rsquo;s a small price to
pay to actually feel well.</p>

<blockquote class="twitter-tweet" lang="en"><p>&quot;It&#39;s gonna be a good vacation because now you know you&#39;re allergic to dairy&quot; - wife</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/302495058689683457">February 15, 2013</a></blockquote>


<h2>On Holding Babies</h2>

<p>I feel like everywhere I look, someone is having a baby, and for whatever
reason, people really like holding them. I had never held one before,
so I wanted to see what all the fuss was about. No one told me what to
do with it, and I figured you can&rsquo;t pet it like a cat, so I just tried
my hardest not to drop it.</p>

<blockquote class="twitter-tweet" lang="en"><p>Held my first baby today, like a pro. I couldn&#39;t get him to stop squirming though. I think I&#39;ll stick with cats. <a href="http://t.co/S48Kit8NDY">pic.twitter.com/S48Kit8NDY</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/307942043588653056">March 2, 2013</a></blockquote>


<h2>On Being Sad (Panda)</h2>

<p>A friend/neighbor/former coworker of mine lost his dog in March.
And by lost, I mean he died. I was sitting by Gordie&rsquo;s side during
the final moments of his life, and it was one of the saddest things I&rsquo;ve
ever seen. This experience made me appreciate the things I have more
than ever.</p>

<blockquote class="twitter-tweet" lang="en"><p>Gonna miss you Gordie :( RIP <a href="http://t.co/m0rZ5p4Yyk">pic.twitter.com/m0rZ5p4Yyk</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/315474527742197761">March 23, 2013</a></blockquote>


<h2>On Taking Vacations</h2>

<p>My wife and I went on some fun vacations this year. Despite my immense
fear of flying and rattlesnakes, my wife convinced me to fly out to Big
Sur, CA where they apparently have rattlesnakes everywhere. It was like
snakes on a plane, except the snakes weren&rsquo;t on the plane (that I knew
of).</p>

<blockquote class="twitter-tweet" lang="en"><p>OMFG a rattlesnake! <a href="http://t.co/XQnyknJu48">pic.twitter.com/XQnyknJu48</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/324992311517925379">April 18, 2013</a></blockquote>


<p>We also went to Bar Harbor, ME in the fall. We&rsquo;ve been going there every
year since our honeymoon, and plan to go back again in 2014. My wife and
I are both originally from Cape Cod, so I think what attracts us here is the
combination of mountains and ocean. Acadia National park a beautiful place!</p>

<blockquote class="twitter-tweet" lang="en"><p>Current status <a href="http://t.co/RMCY52VH61">pic.twitter.com/RMCY52VH61</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/376451354866515968">September 7, 2013</a></blockquote>


<h2>On Selling Drugs</h2>

<p>The series finale of Breaking Bad wouldn&rsquo;t be for another 4 months, but
my neighbors were cooking up a storm of meth right down the street from
me. I live in a quiet residential neighborhood just North of downtown
Burlington, and never would have thought to see something like this.
Turns out they had been cooking meth with their child in the apartment.
Pretty fucked up shit.</p>

<blockquote class="twitter-tweet" lang="en"><p>Holy shit I think they&#39;re busting a meth lab a few houses down from me <a href="https://twitter.com/search?q=%23btv&amp;src=hash">#btv</a> <a href="https://twitter.com/search?q=%23breakingbad&amp;src=hash">#breakingbad</a> <a href="http://t.co/5I1YEBZzCI">pic.twitter.com/5I1YEBZzCI</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/335067219153281024">May 16, 2013</a></blockquote>


<h2>On Receiving Tweet of the Week</h2>

<p>The optimist in me got &ldquo;tweet of the week&rdquo; in <a href="http://www.7dvt.com/">Seven Days</a>
last summer. It wasn&rsquo;t my favorite tweet of the year, but I think it
sums up the weather in VT pretty well. As I&rsquo;m typing this, we&rsquo;re looking
at a low of -14&deg;F this week. I also thought up &ldquo;ForeverAloneSquare&rdquo;,
which was my response to people who tweet FourSquare checkins. Please
stop doing this folks. If I wanted to know where you were, I&rsquo;d use
FourSquare.</p>

<blockquote class="twitter-tweet" lang="en"><p>I just unlocked the &quot;<a href="https://twitter.com/Seven_Days">@Seven_Days</a> tweet of the week&quot; badge on ForeverAloneSquare! <a href="http://t.co/MqBrM3YJfR">pic.twitter.com/MqBrM3YJfR</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/342339674645356544">June 5, 2013</a></blockquote>


<h2>On My Dog Turning 5</h2>

<p>I love my dog. I mean the cats are great and all, but bonding with a dog has
been one of the most rewarding experiences of my life. Sebastian turned
5 this summer and I&rsquo;m hoping he makes it past my 40th birthday to see
what I look like when I&rsquo;m fatter and balder.</p>

<blockquote class="twitter-tweet" lang="en"><p>Happy 5th birthday Sebastian! =D <a href="http://t.co/YB39Me0toF">pic.twitter.com/YB39Me0toF</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/361317421191139329">July 28, 2013</a></blockquote>


<h2>On Making Friends</h2>

<p>I joke a lot about not having friends and being alone, but in reality I
have a lot of really awesome people in my life. It wasn&rsquo;t a resolution
of mine to make new friends or be more outgoing, but that was definitely
one of the themes for me this year. The <a href="http://beerlington.com/blog/2013/08/15/a-reflection-on-organizing-the-burlington-ruby-conference/">conference I organized</a>
was a huge part of that. I&rsquo;ve also been involved in organizing many of
the local software user groups and have met people through those as
well.  I am really looking forward to doing the conference in
2014, and can&rsquo;t wait to share the experience with everyone again.</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/search?q=%23rubyfriends&amp;src=hash">#rubyfriends</a> with <a href="https://twitter.com/buffym">@buffym</a>, <a href="https://twitter.com/brettchalupa">@brettchalupa</a> and <a href="https://twitter.com/Mo_Mack">@Mo_Mack</a> <a href="http://t.co/qG57HnP5cV">pic.twitter.com/qG57HnP5cV</a></p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/361210807943565312">July 27, 2013</a></blockquote>


<h2>Laughter is the Best Medicine (besides Percocet)</h2>

<p>Life is too short to take seriously all the time. Here are a few of my
favorite tweets that still make me chuckle.</p>

<blockquote class="twitter-tweet" lang="en"><p>LinkedIn is the most awkward dating site I&#39;ve ever used.</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/331453001178959874">May 6, 2013</a></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>Referring to spiders as &quot;web developers&quot; changes everything. I have so many web developers living in my basement! D:</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/352805562909597696">July 4, 2013</a></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>Did you hear about the dentist who cleaned the police officer&#39;s teeth?&#10;&#10;He had a brush with the law.</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/375260120814735360">September 4, 2013</a></blockquote>




<blockquote class="twitter-tweet" lang="en"><p>I&#39;m telling the funniest jokes I know, but I still can&#39;t get this ice to crack up.</p>&mdash; Peter Brown (@beerlington) <a href="https://twitter.com/beerlington/statuses/418006904653500417">December 31, 2013</a></blockquote>


<p>Happy New Year and thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have You Ever Had a Bill and Ted Coding Experience?]]></title>
    <link href="http://beerlington.github.io/blog/2013/08/18/the-bill-and-ted-experience-in-software-development/"/>
    <updated>2013-08-18T14:41:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/08/18/the-bill-and-ted-experience-in-software-development</id>
    <content type="html"><![CDATA[<p>Have you ever had an experience where you started to write some code only to discover that the code already existed? &ldquo;Woah&rdquo; you think to yourself as you fire off &ldquo;git blame&rdquo; to figure out which one of your coworkers deserves a full-force high five. Low and behold, your own name shows up as the author, and your mind is blown because you have no memory of writing it.</p>

<p>You, my friend, just had a Bill and Ted Experience.</p>

<iframe width="560" height="315" src="http://beerlington.github.io//www.youtube.com/embed/_NjDHiLzpZc" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Reflection on Organizing the Burlington Ruby Conference]]></title>
    <link href="http://beerlington.github.io/blog/2013/08/15/a-reflection-on-organizing-the-burlington-ruby-conference/"/>
    <updated>2013-08-15T21:19:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/08/15/a-reflection-on-organizing-the-burlington-ruby-conference</id>
    <content type="html"><![CDATA[<p><img src="http://beerlington.github.io/images/burlington-ruby-conference-banner-small.png" alt="Burlington Ruby Conference Banner" /></p>

<p>&ldquo;Why are you organizing a conference?&rdquo; &ndash; Someone asked me this question when we were just starting to plan for this year&rsquo;s Burlington Ruby Conference. I don&rsquo;t remember my exact response, but it was probably a long the lines of &ldquo;Uhhhh I don&rsquo;t know, it&rsquo;s just something I want to do&rdquo;. I remember thinking &ldquo;why wouldn&rsquo;t you want to do it?&rdquo;. I was really excited about it and it felt like one of those things I was supposed to do.</p>

<p>It turns out that doing it well takes a lot of hard work. I&rsquo;m estimating that I spent over 200 hours on this year&rsquo;s event, not including the nights I dreamt about it. I&rsquo;m not sure where that stands compared to other web developers who moonlight as conference organizers, but I&rsquo;m guessing it&rsquo;s on the higher end of the spectrum. I can&rsquo;t picture many developers devoting that much time to something software-related that isn&rsquo;t coding. For me though, the payoff has been huge. While I haven&rsquo;t benefited financially, I&rsquo;ve learned a lot about planning and budgeting, made some awesome friends, and had what I would consider one of the best experiences of my life.</p>

<p>It has been almost two weeks since the conference ended, so I wanted to jot down a few of my thoughts on it before they faded.</p>

<h2>Goals for this year</h2>

<p>This was the 2nd year for the Burlington Ruby Conference. I was not very involved last year, other than helping with a last minute scramble to try and find attendees. This year I wanted to be more involved. When we started planning back in January, we knew there were a few things that needed to change in order to make it an event we could continue to do. To understand what I mean, let&rsquo;s take a look at last year&rsquo;s conference by the numbers:</p>

<p>Last year:</p>

<ul>
<li>Attendees: 75</li>
<li>Speakers: 7</li>
<li>Women: &lt; 10%</li>
<li>Sponsors/supporters: 1</li>
<li>Budget: $12K</li>
</ul>


<p>A conference with only 75 attendees and almost no sponsors is simply not sustainable. Including sponsors, our budget for last year&rsquo;s event was just over $12K. We did not plan on having a conference this small, but as most first-year organizers know all too well, things rarely go as planned. We had to cut back on a lot of things at the last minute, such as the venue size, and it was stressful for everyone involved. In order to make the conference sustainable, we knew we needed to increase our budget and attendance. We set a few goals for this year that we knew were ambitious, but would allow us to run the conference without having to forgo the things we felt were essential.</p>

<p>Our Goals for this year:</p>

<ul>
<li>Attendees: 150</li>
<li>Speakers: 10</li>
<li>Increase female attendance + speakers</li>
<li>Sponsors: MOAR</li>
<li>Video recordings</li>
<li>Keep ticket prices low</li>
<li>Budget: $20K</li>
</ul>


<p>We knew that increasing our attendance and budget by 2x was an ambitious goal. How were we going to get 150 people to come to Vermont for a software conference? How were we going to raise enough money to double our budget and be able to afford some of the nice to haves such as video recordings? How could we increase diversity?</p>

<p>It took a lot of hard work and creativity to reach these goals, and here are a few of the things we did to achieve them.</p>

<h2>MOAR Speakers</h2>

<p>Last year&rsquo;s conference did not have an official call for proposals. All of the speakers were personally invited. When we started thinking about getting speakers at this year&rsquo;s conference, we were sort of naive and wanted to avoid a formal CFP and just do invite-only again. We compiled a list of people that we wanted to speak at the conference and began reaching out to them. We had a couple &lsquo;Yes&rsquo;s, but most of them either said they were busy or just didn&rsquo;t reply. We were a little discouraged, so I <a href="https://twitter.com/btvrubyconf/status/306520777455460352">tweeted at @devchix</a> asking for help getting the word out. 15 minutes later, <a href="https://twitter.com/ashedryden">Ashe Dryden</a> replied saying that she wanted to help us make the process more friendly to diverse groups. Ashe had written a blog post on <a href="http://ashedryden.com/blog/increasing-diversity-at-your-conference">how to increase diversity at your conference</a> that I would consider the bible on this subject. She encouraged us to publish a <a href="http://burlingtonruby.com/diversity.html">diversity statement</a> and <a href="http://burlingtonruby.com/conduct.html">code of conduct</a>, organize a blind speaker selection process, as well as helped us organize a few Google hangouts to meet potential speakers.</p>

<p>The Google hangouts proved to be invaluable for finding great speakers. Two of my favorite speakers this year both happened to be in those hangouts. They seemed very excited about the conference, and since they made it through the blind proposal selection and into the final round, we decided to pick both of them. We ended up with 52 submissions and increased the total number of speakers from 10 to 12, though it didn&rsquo;t make the selection process any easier. For those who submitted and were not selected, I spent a few hours sending personalized emails delivering the bad news. A few people replied asking how they could improve their proposals, but unfortunately with 52 submissions and only 9 slots, it was really not about quality. This was definitely one of the hardest parts of the entire experience for me.</p>

<h2>MOAR Sponsors</h2>

<p>&ldquo;Let&rsquo;s just get more sponsors&rdquo;. This was probably the most naive thought I had going into planning this year&rsquo;s conference. The thing about sponsors is that unless you have a direct connection or are an established event, it&rsquo;s pretty much impossible to find them. There are three reasons I can think of why someone would sponsor a conference. 1) They&rsquo;re hiring, 2) they&rsquo;re marketing a product, and/or 3) to support their community. As I mentioned in my <a href="http://beerlington.github.io/blog/2013/04/06/building-a-strong-foundation-for-vermonts-technology-future/">previous blog post</a>, we didn&rsquo;t have much traction from our local community in terms of financial support, but I thought it would be different if we reached out beyond our local community. Sadly this was not the case. If a company is selling a product or hiring, they want to know that their target audience will be in attendance. They need to know the conference is worth it for them. If they were basing their response on last year&rsquo;s conference, 75 attendees is not a lot of people to get in front of. After &ldquo;cold emailing&rdquo; a TON of companies and getting zero &lsquo;Yes&rsquo;s, it became apparent that we were wasting our time and would need to focus our attention on ticket sales. More on sponsorship in a bit&hellip;</p>

<h2>MOAR Attendees</h2>

<p>Going from 75 to 150 attendees is kind of a big deal. After making the decision to grow, I started to wonder, &ldquo;is this too many people for our second year?&rdquo;. How do you even reach that many people? There are now close to <a href="http://lanyrd.com/topics/ruby/">20 Ruby conferences</a> in the U.S each year, and that number is still increasing. While having a high number of these regional conferences is great for the community, it puts a lot of pressure on the organizers to provide a unique experience. Why would someone fly across the country for a conference when they have one in their own region or state, or even their own city?</p>

<p>We needed to give people a reason to want to come. One of the nice things about Vermont is that it&rsquo;s a beautiful state and people love to vacation here. We recognized that in order to bring people to the conference, we&rsquo;d need to focus on why <em>we</em> believed people should come. Our goal for Burlington Ruby is to build community and have fun. We see it as an excuse for people to come to Vermont for a weekend vacation, away from their normal, busy lives. Oh, and there just so happens to be a Ruby conference taking place.</p>

<p>I live in Vermont for its slower pace and quality of life. This laid back nature is evident in our schedule (long breaks) and the types of talks we had. We decided to focus our marketing on Vermont&rsquo;s beauty and not try and be something we weren&rsquo;t. We&rsquo;re a small conference focused on having a fun, relaxing weekend and making friends.</p>

<p>People seemed to take notice:</p>

<blockquote class="twitter-tweet"><p>There is a reason to visit Burlington, VT, besides Heady Topper. <a href="http://t.co/urpdJVWqX7">http://t.co/urpdJVWqX7</a></p>&mdash; Hiro Asari (@hiro_asari) <a href="https://twitter.com/hiro_asari/statuses/311518675708555264">March 12, 2013</a></blockquote>


<script async src="http://beerlington.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2>The history of the cat sponsors and Ruby toys</h2>

<p>We also wanted to put on a conference that matched our personalities and felt like it belonged here in Burlington.</p>

<p>The cat sponsors and Ruby catnip toys were never something we set out to do. Early in the planning, we decided we wanted to do some sort of workshop to try and get people excited about Ruby and want to come to the conference. I reached out to <a href="https://twitter.com/Mo_Mack">Maureen McElaney</a> who had just started a <a href="http://www.girldevelopit.com/chapters/burlington">Burlington chapter of Girl Develop It</a>. She was excited to meet with us and organize a workshop via GDI. During our initial conversation, the topic of sponsors came up, and Brett and I were discussing the lack of support we were getting from our local community. We started joking about how we were just going to have cats sponsor us, and two days later, <a href="http://burlingtonruby.com/cat.html">the first official conference cats</a> were born.</p>

<p>One month after the cats went live, and still no traction with sponsors, I was sitting there thinking about how great cats are, and decided we needed cat toys to go with the cat sponsors. I reached out to a local artist who had an <a href="http://www.etsy.com/shop/cattitudecattoy">Etsy store</a> and asked if she would be interested in making Ruby shaped catnip toys that we could sell at the conference. I felt like an idiot and thought she would think I was crazy, but she got back to me literally 5 minutes later and said she was interested in making them. She went ahead and made a trial run, and after a week we had the first official Ruby conference catnip toys.</p>

<p><img src="http://beerlington.github.io/images/ruby-catnip-cat-toys.jpg" alt="Burlington Ruby Conference catnip cat toys" /></p>

<p>We mailed out some of the toys to people who had helped us out so far, and figured it would be a good way to get the word out. Soon <a href="http://instagram.com/p/aj3FIsgASy/">pictures</a> and <a href="https://vine.co/v/bEe3MDpDvhQ">videos</a> started popping up on Twitter, and we were getting a lot more traffic to our website. We don&rsquo;t really have any way of knowing, but I&rsquo;m curious how many people came to the conference either directly or indirectly because of the cats.</p>

<h2>Dropping sponsorship prices</h2>

<p>We sold nearly half the total tickets during our initial early bird ticket sale (aka &ldquo;Fresh Tracks&rdquo;). Then things slowed down to a crawl. The good news was that we had already sold more tickets than we did the previous year. The bad news was that we still had 75 to go in order to reach our goal. We knew that if we sold enough tickets, we would at least be able to afford to put on the event and not lose a ton of money. Since we didn&rsquo;t have any traction with sponsors, we decided to drop the sponsorship prices to the point where we were basically selling the tickets in bulk. For slightly more than the individual cost of a ticket, you got to be a sponsor. Not a bad deal. This definitely worked in our favor as we started to have a few sponsors actually reaching out to us.</p>

<h2>Ruby Workshop</h2>

<p>We felt strongly that the Ruby workshop was important to have in conjunction with the conference. Burlington has a very small developer community, and last year we had very few Vermonters in attendance. As I mentioned ealier, we met with Maureen to plan out a Ruby training/workshop, and she took the idea and ran with it. The workshop happened one week before the conference and had around 25 participants. Other than maybe a free class, this was probably one of the best introductions to programming and Ruby that someone could get for under $100. Maureen put together the entire class, including connecting with the teacher <a href="https://twitter.com/alexch">Alex Chaffee</a> who did an AWESOME job teaching the workshop. If you ever have a chance to buy either of these folks a beer, please do so.</p>

<p><img src="http://beerlington.github.io/images/gdi-ruby-workshop.jpg" alt="Girl Develop It Burlington Ruby workshop" /></p>

<h2>Scholarships</h2>

<p>The idea for offering scholarships came from <a href="https://twitter.com/cczona">Carina Zona</a> during one of the Google hangouts. It was something that we wanted to do, but didn&rsquo;t think we&rsquo;d be able to make happen. Later, I found out about a new program through Ruby Central called the <a href="http://rubycentral.org/community#scholarship">Opportunity Scholarship</a> that would match up to $1,500. As the months went by, we were still getting the occasional cat sponsor, and by July had raised over $1K. At this point, we had also sold enough tickets to cover the conference expenses, and were able to set aside tickets to give to scholars. We ended up giving away 11 scholarships, most of which went to women who attended the Girl Develop It workshop, and this was their first tech conference.</p>

<blockquote class="twitter-tweet"><p>I must say, <a href="https://twitter.com/btvrubyconf">@btvrubyconf</a> has one of the higher number of women attendees of the confs I&#39;ve been to recently.</p>&mdash; Steve Klabnik (@steveklabnik) <a href="https://twitter.com/steveklabnik/statuses/363691528465559552">August 3, 2013</a></blockquote>


<script async src="http://beerlington.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Side note: If you&rsquo;re organizing a conference, I highly recommend taking advantage of the scholarship funds from Ruby Central. It&rsquo;s a great way to increase diversity, get the word out about your conference, raise a little money, and most importantly, give people an opportunity to attend a conference who would not have been able to otherwise.</p>

<h2>Selling Out</h2>

<p>During the last week before the conference, our headcount was 149 attendees. This included reselling a handful of tickets that we refunded earlier on. I wanted nothing more than to sell this last ticket to say that we had sold out. Sure, we could have just <em>said</em> that we had sold out, but that would have been lame. So finally it was friday night, 15 minutes before the kick off party started, and I got an email saying the last ticket had been sold.</p>

<p>The guy who bought the last ticket became an instant celebrity:</p>

<blockquote class="twitter-tweet"><p>Achievement unlocked. Met the person who bought last <a href="https://twitter.com/btvrubyconf">@btvrubyconf</a> ticket. <a href="http://t.co/Rc20jGH2bO">http://t.co/Rc20jGH2bO</a></p>&mdash; Michael Denomy (@mdenomy) <a href="https://twitter.com/mdenomy/statuses/363999840298356736">August 4, 2013</a></blockquote>


<script async src="http://beerlington.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>Since we&rsquo;re planning on keeping next year&rsquo;s attendance at 150 (including speakers), I&rsquo;m hoping the fact that we sold out this year will create demand and make it easier to sell tickets next year.</p>

<h2>Mission Accomplished</h2>

<p>In the end, we reached or exceeded every single one of our goals. We had 150 attendees, nearly doubled the number of speakers, increased female attendance to over 20%, had a considerable increase in sponsors, and were able to hire <a href="http://www.confreaks.com/events/btvruby2013">Confreaks</a> to come and film the talks.</p>

<p>This year:</p>

<ul>
<li>Attendees: 150</li>
<li>Speakers: 12</li>
<li>Women: > 20%</li>
<li>Sponsors/supporters: 12</li>
<li>Confreaks: [✓]</li>
<li>Budget: $24K</li>
</ul>


<p>This post discussed just a few of the things we did for this year&rsquo;s Burlington Ruby Conference that I felt were either unique to our event or contributed to our success. I don&rsquo;t think people will notice too many drastic changes next year as we&rsquo;ll likely focus on polishing things up and continuing to make it an exceptional experience for everyone. If you&rsquo;re interested in hearing more or have specific questions about conferences or cats, <a href="https://twitter.com/beerlington">please reach out</a>!</p>

<p>Thank you so much to everyone who made the event happen, especially <a href="https://twitter.com/brettchalupa">Brett</a>, my supportive <a href="https://twitter.com/vermontgoldens">wife</a>, my mom who provided unlimited phone support, and my partners at <a href="http://agilion.com/">Agilion</a>. I am incredibly grateful to have had the experience and cannot wait to start organizing it again next year. See you at Burlington Ruby in 2014!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Custom Rspec Generator]]></title>
    <link href="http://beerlington.github.io/blog/2013/06/23/creating-a-custom-rspec-generator/"/>
    <updated>2013-06-23T12:43:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/06/23/creating-a-custom-rspec-generator</id>
    <content type="html"><![CDATA[<p>I&rsquo;m a huge proponent of test driven development and have been feeling
sort of guilty about a gem that I wrote which does not encourage
testing whatsoever. The gem, <a href="https://github.com/beerlington/classy_enum">ClassyEnum</a>,
provides class-based enumerator functionality on top of Active Record. This blog post is not so much
about the gem itself, so If you&rsquo;re interested in reading more about it,
the <a href="http://beerlington.com/classy_enum/">README</a> has some good examples.</p>

<p>Historically, ClassyEnum has had a built-in generator to
quickly create classes that represent enum members. While this has served me
well, it has never generated any spec files along with these classes.
I always end up either creating them manually, or just forgoing tests
altogether. Neither option was great, so I wanted to see what it would
take to create spec files automatically, similar to how Rails can
generate model specs when using the model or scaffold generators.</p>

<p>When ClassyEnum is installed in your Rails project, you can run the generator like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">$ rails g classy_enum Priority low medium high</span>
</span><span class='line'><span class="go">      create  app/enums</span>
</span><span class='line'><span class="go">      create  app/enums/priority.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which produces the following file:</p>

<figure class='code'><figcaption><span>My Project - app/enums/priority.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Priority</span> <span class="o">&lt;</span> <span class="ss">ClassyEnum</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Priority</span><span class="o">::</span><span class="no">Low</span> <span class="o">&lt;</span> <span class="no">Priority</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Priority</span><span class="o">::</span><span class="no">Medium</span> <span class="o">&lt;</span> <span class="no">Priority</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Priority</span><span class="o">::</span><span class="no">High</span> <span class="o">&lt;</span> <span class="no">Priority</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each Priority subclass represents an enum member, and behaves like a
true Ruby class. This boilerplate code starts out innocent enough,
as most code does, but over time, I find myself adding logic
and properties to these classes. Depending on how lazy I am,
sometimes I test it, sometimes I don&rsquo;t.</p>

<h2>Exploring the Un<em>spec</em>tacular Generator</h2>

<p>The code for the &ldquo;main&rdquo; generator in ClassyEnum is fairly straightforward. It
has a description, takes a few arguments, and copies a dynamically generated
file into app/enums, creating the directory if it does not exist.</p>

<figure class='code'><figcaption><span>ClassyEnum Enum Generator - lib/generators/classy_enum/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ClassyEnumGenerator</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">NamedBase</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Generate a ClassyEnum definition in app/enums/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;EnumName&#39;</span>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:values</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:array</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1 value2 value3 etc...&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source_root</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../templates&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">copy_files</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>    <span class="n">empty_directory</span> <span class="s1">&#39;app/enums&#39;</span>
</span><span class='line'>    <span class="n">template</span> <span class="s2">&quot;enum.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;app/enums/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I would recommend the <a href="http://guides.rubyonrails.org/generators.html">Rails Generator Guide</a>
if you aren&rsquo;t familiar with the syntax. You may also want to read the
<a href="http://rdoc.info/github/wycats/thor/master/Thor/Actions.html">Thor documentation</a>
which is the foundation for the Rails generator DSL.</p>

<h2>Making the Generator <em>Spec</em>tacular</h2>

<p>I had four main requirements for my generator&rsquo;s new behavior:</p>

<ol>
<li>It must automatically create specs in spec/enums when the generator
is run.</li>
<li>The specs it creates must work out of the box (even if they are
pending).</li>
<li>It cannot break existing behavior.</li>
<li>It must be future proof by not relying on or hacking internal Rails or Rspec code</li>
</ol>


<p>After digging around on Stack Overflow and reading the Rails Guide,
I discovered that Rails exposes a <a href="http://api.rubyonrails.org/classes/Rails/Generators/Base.html#method-c-hook_for"><code>hook_for</code></a>
method. When passed the <code>:test_framework</code> argument,
the main generator can automatically figure out which test framework your application is
using, and based on naming conventions, which spec generator to load.
All I had to do was add the hook to my existing generator, and create
some support files to go along with it.</p>

<figure class='code'><figcaption><span>ClassyEnum Enum Generator with hook - lib/generators/rspec/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">ClassyEnumGenerator</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">NamedBase</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Generate a ClassyEnum definition in app/enums/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;EnumName&#39;</span>
</span><span class='line'>  <span class="n">argument</span> <span class="ss">:values</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:array</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1 value2 value3 etc...&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">source_root</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../templates&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">copy_files</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>    <span class="n">empty_directory</span> <span class="s1">&#39;app/enums&#39;</span>
</span><span class='line'>    <span class="n">template</span> <span class="s2">&quot;enum.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;app/enums/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">.rb&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">hook_for</span> <span class="ss">:test_framework</span> <span class="c1"># &lt;======= Add the hook here</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>More information about this hook can be found in the
<a href="http://guides.rubyonrails.org/generators.html#customizing-your-workflow">&ldquo;Customizing Your Workflow&rdquo;</a>
section of the Rails Guide.</p>

<p>After adding just the hook, I knew it wasn&rsquo;t going to work, but because I like
taking baby steps when coding, I rebuilt and
installed the gem, updated my project&rsquo;s ClassyEnum dependency,
and ran the generator anyway:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">rails g classy_enum Priority low medium high</span>
</span><span class='line'><span class="go">      create  app/enums</span>
</span><span class='line'><span class="go">      create  app/enums/priority.rb</span>
</span><span class='line'><span class="go">       error  rspec [not found]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error is just saying that the test_framework generator could
not be found, which was expected because I had not created it yet.
Since I don&rsquo;t have any tests for the generator itself, I used this message
as a failing test, and my passing test would be when the enum spec was generated.</p>

<p>According to the Rails Guide, the <code>hook_for</code> method will search in a
few places for the generator, looking for one of a few different
class names. By default it looks for a class named after the generator that
invoked the hook, namespaced with the test framework&rsquo;s class name and &ldquo;Generators&rdquo;.
In my case this would be <code>Rspec::Generators::ClassyEnumGenerator</code>.
I could have alternatively used the <code>:as =&gt;</code> option to specify
a different class name, but I wanted to use the default.</p>

<p>I needed the behavior of the enum spec generator to basically mimic that
of my enum class generator, the only difference being the spec location
and which template was used. My final Rspec generator class is shown
here:</p>

<figure class='code'><figcaption><span>ClassyEnum Rspec Generator - lib/generators/rspec/classy_enum_generator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Rspec</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Generators</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">ClassyEnumGenerator</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Generators</span><span class="o">::</span><span class="no">NamedBase</span>
</span><span class='line'>      <span class="n">desc</span> <span class="s2">&quot;Generate a ClassyEnum spec in spec/enums/&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">argument</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:string</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;EnumName&#39;</span>
</span><span class='line'>      <span class="n">argument</span> <span class="ss">:values</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:array</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span> <span class="ss">:banner</span> <span class="o">=&gt;</span> <span class="s1">&#39;value1 value2 value3 etc...&#39;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">source_root</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../templates&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">copy_files</span> <span class="c1"># :nodoc:</span>
</span><span class='line'>        <span class="n">empty_directory</span> <span class="s1">&#39;spec/enums&#39;</span>
</span><span class='line'>        <span class="n">template</span> <span class="s2">&quot;enum_spec.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/enums/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the spec template file:</p>

<figure class='code'><figcaption><span>lib/generators/rspec/templates/enum_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% values.each </span><span class="k">do</span> <span class="o">|</span><span class="n">arg</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">describe &lt;%= &quot;</span><span class="si">#{</span><span class="n">class_name</span><span class="si">}</span><span class="sx">::</span><span class="si">#{</span><span class="n">arg</span><span class="o">.</span><span class="n">camelize</span><span class="si">}</span><span class="sx">&quot; %&gt;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="s2">&quot;add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%- end -</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After adding these two files to ClassyEnum, I reinstalled and
reran the generator in my project and everything worked!</p>

<p>Here is my &ldquo;passing&rdquo; test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">rails g classy_enum Priority low medium high</span>
</span><span class='line'><span class="go">      create  app/enums</span>
</span><span class='line'><span class="go">      create  app/enums/priority.rb</span>
</span><span class='line'><span class="go">      invoke  rspec</span>
</span><span class='line'><span class="go">      create    spec/enums</span>
</span><span class='line'><span class="go">      create    spec/enums/priority_spec.rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which generates the following spec file:</p>

<figure class='code'><figcaption><span>My Project - spec/enums/priority_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">Priority</span><span class="p">:</span><span class="ss">:Low</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="s2">&quot;add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">Priority</span><span class="p">:</span><span class="ss">:Medium</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="s2">&quot;add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="ss">Priority</span><span class="p">:</span><span class="ss">:High</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">pending</span> <span class="s2">&quot;add some examples to (or delete) </span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I am using the hook_for method, it includes some other behavior,
such as supporting the <code>--skip-test-framework</code> flag out of the box. This
would allow someone to generate the enum classes without any specs, but
I don&rsquo;t recommend doing that. :)</p>

<h2>Wrapping Up</h2>

<p>I&rsquo;m happy with ClassyEnum generator once again. It creates spec files by
default which makes me feel like I&rsquo;m able to practice what I preach. I
was able to achieve all four of my goals without any crazy hacks or making
any sacrifices. I was also able to easily add support for TestUnit by
adding an additional generator and template file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a strong foundation for Vermont's technology future]]></title>
    <link href="http://beerlington.github.io/blog/2013/04/06/building-a-strong-foundation-for-vermonts-technology-future/"/>
    <updated>2013-04-06T20:34:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/04/06/building-a-strong-foundation-for-vermonts-technology-future</id>
    <content type="html"><![CDATA[<p>I went to a <a href="http://www.vermonttechnologyalliance.org/events/event_details.asp?id=308176&amp;group=">VTTA Lunch and Learn</a>
meeting last week focused on &ldquo;Marketing Vermont as a technology state&rdquo;.
I&rsquo;ve had some time to reflect on this objective and wanted to talk about some of the frustrations I&rsquo;ve felt in
trying to address this very issue.</p>

<p>During the lunch session, David Parker of Dealer.com described how Vermont&rsquo;s
greatest opportunity to grow our economy is through the technology sector.
Vermont’s tourism revenue accounts for a small minority of its GDP, yet our
state&rsquo;s marketing is disproportionately focused on tourism.
<a href="http://www.youtube.com/watch?v=o4yr58Xga2A">In his presentation</a>,
Parker expressed that we need to get better at educating
people in science and technology, finding startup capital, and retaining a young
energetic workforce. Instead of proposing concrete actions though, he suggests
&ldquo;changing the rhetoric&rdquo; by talking about what Vermont has to offer. While I
agree with his message, unfortunately talk is cheap and ideas are free, and
neither is worth shit unless you actually stand up and do something.</p>

<p>Unfortunately, getting the word out about these great jobs and companies is not
enough to attract people to our state. One individual at the meeting went as
far as suggesting that every ad in Vermont Life magazine should feature a
cellphone or laptop. Are you kidding me? Vermont is a beautiful place, let&rsquo;s
not change that. Can there not be a balance between technology and Vermont&rsquo;s
simple beauty without the two interfering with the other?</p>

<p>One topic that was missing from the lunch discussion was the role that community
plays in this endeavour. Yes, technology jobs and businesses are undeniably
important, but community is what gives people a sense of belonging. Do artists
and musicians live here because Vermont has one of the <a href="http://www.bls.gov/web/laus/laumstrk.htm">lowest unemployment rates in the country</a>?
No, they live here because there is a community that
supports them. The role of community in the technology sector is no different.</p>

<h2>Community is an Investment, Not an Overnight Success</h2>

<p>Many Americans prefer band-aids to solve problems and don&rsquo;t consider future
repercussions of today&rsquo;s decisions. Why should we invest in renewable energy
when we can solve our immediate energy needs with fossil fuels? Why should we
pay higher taxes when corporations can sponsor our highways? Vermonters are
different. We don&rsquo;t want billboards taking away from Vermont&rsquo;s beauty. We would
rather pay $15 for a hamburger made from locally raised cows than $4 for a
Big Mac. More importantly though, our small communities thrive because they&rsquo;re not
looking for short term payoff. Community, like renewable energy, is a long
term investment and not a band-aid.</p>

<p>I&rsquo;m organizing a software developer conference this summer called the
<a href="http://burlingtonruby.com/">Burlington Ruby Conference</a>.
Last year was our first time hosting the event and it attracted
80 developers for a weekend of networking and education in Burlington. Only about
25% of the attendees were from Vermont. The rest were from Boston, Montreal,
New York, and other parts of New England. We even had two guys from Denmark and
one from Mississippi. We also had a small number of women attend, but this year we have
been putting a lot of energy into increasing that number. We reached out to the
female developer and speaker communities, published a <a href="http://burlingtonruby.com/diversity.html">diversity statement</a> and
<a href="http://burlingtonruby.com/conduct.html">code of conduct</a>, and have teamed up with
<a href="http://www.girldevelopit.com/chapters/burlington">Girl Develop It</a> to offer low cost
training in conjunction with the conference. What other technology event in
Vermont can make similar claims?</p>

<p>This year we&rsquo;ve reached out to numerous Vermont companies soliciting sponsorship
for the conference and have been met with the same response each time. &ldquo;Sorry,
not interested. We don&rsquo;t do Ruby, we do _____&rdquo;. Fill in the blank with
Java, .Net, LOLCODE, whatever. That&rsquo;s great, but these companies are obviously
missing the point. When was the last time there was a Java or .Net conference of this caliber in Vermont?
This is an opportunity to support the very community that these
companies are trying to hire from. Just because a developer writes Java code
to pay the bills, doesn&rsquo;t necessarily mean he or she wants to do this in their
free time. If you look at the
<a href="http://burlingtonruby.org/buruco2012/">speakers we had last year</a>, it clearly wasn&rsquo;t all
about Ruby. We had talks on building location based apps, database scaling,
and multiple JavaScript talks from some of the most respected people in these fields.</p>

<p>Why have a Ruby conference then you ask? Simple. The Ruby community as a whole
represents the type of community that we know will thrive in Vermont. The people
are passionate, helpful, and strong advocates for diversity. Ruby developers
also tend to be at the forefront of best practices. Combined, these characteristics
lead to a vibrant, successful community. Just look at the number of other
<a href="http://lanyrd.com/topics/ruby/">regional Ruby conferences</a> that have sprung
up in the last few years. Ruby may not be the
<a href="http://www.codinghorror.com/blog/2013/03/why-ruby.html">cool language anymore</a>,
but the community is thriving. In my years of being a
Ruby developer, I&rsquo;ve never met someone who said they only use Ruby because it
pays the bills.</p>

<p>This conference is going to happen whether we have local support or not. We are
fortunate to live in a city where our costs to organize the event will be covered
by ticket sales alone. We&rsquo;ve also added a crowd-sourced fundraising effort
called &ldquo;<a href="http://burlingtonruby.com/cat.html">Burlington Ruby Cats</a>&rdquo;
that is not only raising money for the conference,
but also for the Humane Society of Chittenden County. Having sponsors would allow
us to do things above and beyond what a typical conference can offer such as
scholarships for students and underrepresented groups like women and minorities.
Equally as important though, having support from local sponsors shows that these
companies actually care about our community. We are not organizing this
conference to make money, infact we will be lucky if we break even given
everything we want to do. We are hosting a lakeside BBQ and providing professional
recordings of the talks free of charge. We are organizing the conference because
we want to invest in our community. We want people to think about this conference
when they think of Burlington, Vermont; thereby helping to achieve our goal of
&ldquo;Marketing Vermont as a technology state&rdquo;.</p>

<h2>How can I get involved?</h2>

<p>Don&rsquo;t get me wrong, the Vermont software community as it stands today is awesome.
I participated in (<a href="http://beerlington.github.io/blog/2012/10/21/how-we-won-hackvt/">and won</a>)
the 2nd annual Vermont Hackathon last October. This
event was targeted toward Vermont developers and the amount of support that local
businesses gave was incredible. This was a great success for our community,
but we can&rsquo;t limit ourselves to a handful of these events a year, or only focus
on the business side of Vermont&rsquo;s technology economy.</p>

<p>I also help organize a number of different software related user groups in the
Burlington area. Our first group, the <a href="http://www.btvwag.org/">Burlington Web Application Group</a>
(BTVWAG) typically has 30-50 people at any given meetup, and our latest group,
<a href="http://burlingtonjs.org/">Burlington JS</a>, filled all 35 of its slots in the first day it was announced.
These groups are run by volunteers and represent exactly what our technology
community is about.</p>

<p>People ask me after every meetup how they can get involved, but then I never hear
back from them. Step up folks! Acknowledging that we have a problem is the first
step, but taking action is the only way that things will change. There are a
number of community members who get this and have devoted countless hours of their free
time to building the community. Aside from the hackathon,
<a href="http://vtcodecamp.org/">Vermont Code Camp</a>, <a href="http://www.techjamvt.com/">Vermont Tech Jam</a>,
and <a href="http://btvgig.org/">BTVGig</a> are other examples of events and initiatives led by
passionate Vermonters who want to see our community grow. We also have folks
like Jen Mincar at <a href="http://www.officesquaredvt.com/">Office Squared</a> who provide
places for these groups to gather, free of charge.</p>

<p>Vermont has jobs and an incredible opportunity for growth through technology,
so now is the time to start investing in our community, and investing in our
future. Please <a href="https://twitter.com/beerlington">reach out</a> if you want to
join us in building a strong foundation for Vermont&rsquo;s technology future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Simplified Query Interface for Relationships in Active Record 4]]></title>
    <link href="http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4/"/>
    <updated>2013-03-10T14:42:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2013/03/10/a-simplified-query-interface-for-relationships-in-activerecord-4</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Rails 4 now lets you simplify &quot;belongs_to&quot; association queries:</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Before</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">author_id</span><span class="p">:</span> <span class="vi">@author</span><span class="p">)</span>
</span><span class='line'><span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">imageable_id</span><span class="p">:</span> <span class="vi">@cat</span><span class="p">,</span> <span class="n">imageable_type</span><span class="p">:</span> <span class="s1">&#39;Cat&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># After</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="vi">@author</span><span class="p">)</span>
</span><span class='line'><span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">imageable</span><span class="p">:</span> <span class="vi">@cat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>About six months ago I added a <a href="https://github.com/rails/rails/pull/7273">new feature to Active Record</a>
that allows you to write simpler queries across associated models. Compared to many of
the other <a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">new features in Rails 4</a>,
this isn&rsquo;t a significant change, however I think it&rsquo;s pretty
handy so I wanted to talk about it and show some examples. Other than a
<a href="http://contributors.rubyonrails.org/contributors/pete-brown/commits">few small bug fixes</a>,
this was my first real contribution to Rails, and the experience was enlightening
(saving that for another post).</p>

<h2>It&rsquo;s All About the Interface</h2>

<p>Prior to this change, any queries that used a foreign key column were required
to specify the actual column name as the hash key in the query. The biggest
problem I had with this approach is that it wasn&rsquo;t consistent with other
Active Record APIs. When I&rsquo;m working with models, I tend to be thinking in
terms of relationships and objects as opposed to database columns.</p>

<p>Take the following example from Rails 3.x where you can build new
objects using the <code>belongs_to</code> relationship, but you cannot query with this
relationship. When you are querying, you need to shift into an object + database
hybrid mindset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:author</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Creating related objects using the model association:</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="no">Author</span><span class="o">.</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Does NOT work in Rails 3.x</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="no">Author</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="c1"># =&gt; NOPE!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Must specify foreign key to make query work in Rails 3.x</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">author_id</span><span class="p">:</span> <span class="no">Author</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="c1"># =&gt; Yup!</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above example, I am specifying the foreign key on one side, and the object on the other.
I think it can be hard to remember when you can use the associations and when
you can&rsquo;t. Obviously a more practical approach would be to use <code>Author.first.posts</code>,
but this gives flexibility in cases where you might not have both sides of the
relationship fully setup.</p>

<p>The above example may seem trivial so here&rsquo;s an example using a
non-conventional relationship:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:writer</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s1">&#39;Author&#39;</span><span class="p">,</span> <span class="n">foreign_key</span><span class="p">:</span> <span class="s1">&#39;author_id&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Ah crap... I forgot what my foreign key was called!</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">writer_id</span><span class="p">:</span> <span class="no">Author</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="c1"># =&gt; NOPE!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Must still specify foreign key column here</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">author_id</span><span class="p">:</span> <span class="no">Author</span><span class="o">.</span><span class="n">first</span><span class="p">)</span> <span class="c1"># =&gt; Yup!</span>
</span></code></pre></td></tr></table></div></figure>


<p>This issue becomes even more apparent when working with polymorphic relationships:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cat</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Image</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">polymorphic</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">imageable_id</span><span class="p">:</span> <span class="no">Cat</span><span class="o">.</span><span class="n">first</span><span class="p">,</span> <span class="n">imageable_type</span><span class="p">:</span> <span class="s1">&#39;Cat&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Striving for Consistency</h2>

<p>After seeing a few <a href="https://github.com/rails/rails/issues/1736">different</a>
<a href="https://github.com/rails/rails/issues/5067">issues</a> get opened, I realized
I wasn&rsquo;t the only one who felt this inconsistency was unintuitive. It was
causing enough confusion that people were reporting it as a bug,
convinced that it &ldquo;used to work&rdquo;.  This clearly wasn&rsquo;t a bug, and at some
point an unintuitive interface needs to be addressed.</p>

<p>I hadn&rsquo;t spend a ton of time in the Active Record internals so I decided
to dive in and see if I could change the API so it worked with the relationship
name. I knew that each Active Record model tracks its relationships with other
models using &ldquo;reflections&rdquo;. Each reflection stores various properies such as the
relationship name and macro (ie belongs_to, has_many, etc).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='irb'><span class='line'><span class="go">1.9.3-p327 :007 &gt; Author.reflections</span>
</span><span class='line'><span class="go"> =&gt; {:posts=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf391dc28 @macro=:has_many, @name=:posts, @options={:extend=&gt;[]}, @active_record=Author(id: integer, name: string, created_at: datetime, updated_at: datetime), @plural_name=&quot;posts&quot;, @collection=true&gt;}</span>
</span><span class='line'><span class="go">1.9.3-p327 :008 &gt; Post.reflections</span>
</span><span class='line'><span class="go"> =&gt; {:author=&gt;#&lt;ActiveRecord::Reflection::AssociationReflection:0x007f8cf4c1afb0 @macro=:belongs_to, @name=:author, @options={}, @active_record=Post(id: integer, body: text, author_id: integer, created_at: datetime, updated_at: datetime), @plural_name=&quot;authors&quot;, @collection=false&gt;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As I dove further into the Active Record internals, I found the
<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/relation/predicate_builder.rb">ActiveRecord::PredicateBuilder</a>
which is used for building the &ldquo;WHERE&rdquo; clause of every Active Record
query. It was not the most straightforward class I&rsquo;ve worked with, but
the integration tests were good so I could do some exploratory testing
and know when I had broken something. After a few days of discussing
with the Rails core team about what behavior should be implemented, I
had some <a href="https://github.com/rails/rails/commit/3da275c4396d7fad250d2b786027ba4f14344bd4">working code</a>.</p>

<h2>Conclusion</h2>

<p>In the end, the changes I made to the predicate builder allow you to query across a
belong_to relationship without specifying the foreign key. Does it
enable you to do something you couldn&rsquo;t do before? Not really, however, bringing
more consistency to the API was my main goal.</p>

<p>Now that <a href="http://weblog.rubyonrails.org/2013/2/25/Rails-4-0-beta1/">Rails 4 beta has been released</a>
I encourage people to download it today and try out some simple examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="vi">@author</span><span class="p">)</span>
</span><span class='line'><span class="no">Image</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">imageable</span><span class="p">:</span> <span class="vi">@cat</span><span class="p">)</span> <span class="c1"># =&gt; Polymorphic!</span>
</span></code></pre></td></tr></table></div></figure>


<p>I also recommend checking out the <a href="https://github.com/rails/rails/blob/master/activerecord/test/cases/relation/where_test.rb#L26-L81">Active Record tests</a>
for some more complex examples of how it can be used with polymorphic
relationships and single-table inheritance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Books is Fun]]></title>
    <link href="http://beerlington.github.io/blog/2012/11/10/reading-books-is-fun/"/>
    <updated>2012-11-10T19:18:00-05:00</updated>
    <id>http://beerlington.github.io/blog/2012/11/10/reading-books-is-fun</id>
    <content type="html"><![CDATA[<p>I picked up a <a href="http://www.amazon.com/Kindle-Paperwhite-Touch-light/dp/B007OZNZG0">Kindle Paperwhite</a> a few weeks ago to replace the one I “borrowed” from my wife. It has turned out to be a fantastic piece of hardware, and I agree with pretty much everything <a href="http://daringfireball.net/2012/10/kindle_paperwhite">John Gruber has said about it</a>. I’ve never considered myself much of a reader, but I’ve made it through some great (and not so great) books over the last couple months, and wanted to share a my thoughts on them.</p>

<h2>I’m Currently Reading:</h2>

<h3><a href="http://devblog.avdi.org/2012/06/05/confident-ruby-beta/">Confident Ruby</a></h3>

<p>If this book was actually finished, I would be done with it. It is currently in alpha and only about 80 pages, but the content so far is outstanding. What I enjoy about Avdi Grimm’s writing is that he can take subjects like <a href="http://exceptionalruby.com/">exception handling</a> and <a href="http://objectsonrails.com/">objects</a> and describe them in a way you wouldn’t think possible. After taking some time off from writing Confident Ruby to focus on his <a href="http://devblog.avdi.org/rubytapas/">RubyTapas</a> screencast series, Avdi finally sent out another update this morning.  It’s a great book for anyone who has been working with Ruby for a while and feels like they’ve mastered the basics.</p>

<h3><a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/passionate-programmer.jpg" /></div>


<p>We’ve all been shit on by managers and coworkers at one point or another. Chad Fowler has been through it all too, but instead of just complaining, he wrote a book about what he learned. According to my Kindle, I’m only about 55% done, but I’m really enjoying it so far. The short, targeted chapters make it easy to pick up and read when you only have a couple minutes to spare. I would recommend this book for anyone who thinks they know everything and that managers are always wrong.</p>

<h2>Recent readings:</h2>

<h3><a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: The Good Parts</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/js-the-good-parts.gif" /></div>


<p>If you’ve been a developer for a while but never really taken the time to properly learn JavaScript, start with this book. It will give you a new appreciation for the language and leave you longing for more. The funny thing about this book is that it’s only 176 pages (compared to the Definitive Guide’s 1,100), and a large portion is spent discussing the parts of JavaScript you should avoid or be cautious of. Since reading it, I’ve been watching some of <a href="http://pluralsight.com/training/Courses#javascript">Pluralsight’s JavaScript courses</a> and I feel like it gave me a solid foundation for learning more.</p>

<h3><a href="http://www.amazon.com/dp/0321721330">Practical Object Oriented Design in Ruby</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/ood.jpg" /></div>


<p>Not only is this one of the best Ruby books I’ve ever read, it’s also one of the best programming books period. <a href="https://twitter.com/sandimetz">Sandi Metz</a> is a master of analogies, and the way she explains the principals of object oriented design has me convinced I could learn anything from her. I committed to giving a presentation on <a href="http://burlingtonruby.org/2012/08/30/intro-to-ruby-oop-intro-to-active-admin.html">Object Oriented Programming in Ruby</a> back in September and had been working on it for a few solid weeks. This book came out about a week before my presentation, I read it in three days, and decided to completely scrap my presentation and start over. This book is perfect for Ruby developers who want to learn more about object oriented design, but do it in a language that is familiar to them.</p>

<h3><a href="http://www.amazon.com/Service-Oriented-Design-Addison-Wesley-Professional-Series/dp/0321659368">Service Oriented Design with Ruby and Rails</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/sodrr.jpg" /></div>


<p>I picked this one up after receiving a <a href="http://stackoverflow.com/questions/10065022/ruby-on-rails-soa-design-resources-and-examples/10468079#10468079">fantastic reply</a> to a question I posted on Stack Overflow regarding Rails SOA resources. While slightly outdated by the time I read it, it has actually aged fairly well compared to other technology-specific software books. The book provides a thorough overview for people who’ve never built or consumed web services in Ruby, and a great refresher for experienced developers who have. For anyone who has read it, I’d recommend listening to a recent <a href="http://rubyrogues.com/076-rr-service-oriented-design-with-paul-dix/">Ruby Rogues podcast</a> featuring author Paul Dix. They discuss some of the changes in technology and practices since its release, and Paul reflects on how we would write it today if given the opportunity.</p>

<h3><a href="http://www.shippinggreatness.com/">Shipping Greatness</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/shipping.gif" /></div>


<p>This book was a big departure from other tech books I’ve read in that it was written specifically for managers and not software developers. I feel like I was getting management “insider information” while reading it, and definitely have a new appreciation for the work done by non-coders. Written from the perspective of a former product leader at Google and Amazon, it was perhaps too “enterprisey” for some folks, but as someone who has worked in startups my whole career, it was fascinating to read how large companies build and ship products. Other than a couple sections I skipped such as “Understand How to Communicate with Designers”, this was a very enjoyable read.</p>

<h3><a href="http://shop.oreilly.com/product/9780596802004.do">Confessions of a Public Speaker</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/confessions.gif" /></div>


<p>Another departure from the coding genre, Confessions offers a glimpse into the life of a professional public speaker. I was certainly not expecting to become a better public speaker from simply reading this book, but was interested in hearing about someone else’s experiences on the subject. I’d recommend it for anyone who has done any amount of public speaking regardless of whether you want to do more or absolutely hated the experience. Communication, whether it’s public speaking or otherwise, is an important skill that very few software developers take time to learn.</p>

<h3><a href="http://martinfowler.com/books/dsl.html">Domain Specific Languages</a></h3>

<div style="float:left; margin-right: 20px"><img src="http://beerlington.github.io/images/books/dsl.jpg" /></div>


<p>I did not enjoy this book at all, infact, I didn’t even finish reading it. It is pretty much the exact opposite of Practical Object Oriented Design in terms of readability. It is too lengthy and far too comprehensive for my taste. Unless you’re planning on creating the next <a href="http://cukes.info/">Cucumber</a> or you&rsquo;re writing your thesis on DSLs, save yourself some time and read something else. The only reason I picked it up was because I was interested in building internal DSLs in Ruby and InformIT had it <a href="http://www.informit.com/deals/">on sale for for $9.99</a>. I might revisit it someday, but I have a fairly long list of books I want to get through, so that’s not likely to happen any time soon.</p>

<h2>On my reading list (in no particular order):</h2>

<p>Unfortunately I buy books faster than I read them so here’s a list of those on my immediate reading list (ie they’re already on my Kindle):</p>

<ul>
<li>The Art of Community: Building the New Age of Participation</li>
<li>Being Geek: The Software Developer’s Career Handbook</li>
<li>Team Geek: A Software Developer’s Guide to Working Well With Others</li>
<li>The dRuby Book: Distributed and Parallel Computing with Ruby</li>
<li>Distributed Programming with Ruby</li>
<li>The Connected Company</li>
<li>Maintainable JavaScript</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How We Won Hack|VT]]></title>
    <link href="http://beerlington.github.io/blog/2012/10/21/how-we-won-hackvt/"/>
    <updated>2012-10-21T20:21:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2012/10/21/how-we-won-hackvt</id>
    <content type="html"><![CDATA[<p>This post describes how our team, <strong>Datamorphosis</strong>, won the <a href="http://hackvt.com/">HackVT hackathon</a>, and the strategy we used to ensure that if we didn’t win, we’d at least be proud of what we built. Read on to find out how we formed our team, brainstormed an idea, researched and planned our application, executed during the event, which technologies we used, and how we presented our winning application: <strong>The Vermont Business Landscape</strong>.</p>

<p><img src="http://petebrown-pics.s3.amazonaws.com/public/vermont-business-landscape-datamorphosis.png" alt="Insert App screenshot" /></p>

<h2>Forming a Team</h2>

<p>Hackathons are not just about writing code. They are about solving a problem in the most succinct way possible, and effectively communicating the problem and solution in a remarkably short period of time. Having the right team is critical to accomplishing that goal. There are very few people in this world who alone can brainstorm an idea, aggregate complex data, build APIs, design a usable interface, and present their work in front of a judging audience. The rest of us are mere mortals. Forming a solid team is about understanding the strengths and weaknesses of each member, and how they will fit together.</p>

<h3>Our Team:</h3>

<ul>
<li><a href="http://adambouchard.info">Adam Bouchard</a></li>
<li><a href="https://twitter.com/alanpeabody">Alan Peabody</a></li>
<li><a href="http://katiemccurdy.com/">Katie McCurdy</a></li>
<li><a href="http://www.linkedin.com/in/patrickberkeley">Patrick Berkeley</a></li>
<li><a href="https://twitter.com/beerlington">Peter Brown</a> (me!)</li>
</ul>


<p>Combined, our team was highly skilled in web design and development, data analysis, user experience, and communication; precisely the skills needed to succeed in a hackathon. Almost every member of our team had previously worked with another member at some point in the past. We understood each other’s strengths and weaknesses and knew exactly how each person could contribute. This allowed us to trust one another and stay focused on the tasks that we were most qualified for.</p>

<h2>Brainstorming and Planning</h2>

<p>When selecting our data set, there was one theme that seemed to resonate with our team: <em>Incorporating data that was challenging to aggregate and analyze</em>. The reason for this is that many successful business models are built around simplifying a tedious task. Our team believes in the value of small businesses to Vermont’s economy, and in doing research, we discovered that the state has a need for aggregating business data from disparate data sources. The <a href="http://burlingtonvt.gov/cedo/">Community &amp; Economic Development Office</a> receives frequent inquiries from prospective new business owners as to the health of various sectors throughout Vermont.</p>

<p>Once we had a vague idea that we wanted to build a tool to assist new business owners, we began to research and plan our application. Our team met a few times during the week leading up to the hackathon, and used <a href="https://flowdock.com/">Flowdock</a> to discuss ideas (even when we were in the same room).</p>

<h3>Here are a few of the areas that we researched:</h3>

<ul>
<li><strong>Market need</strong> &ndash; If you’re trying to solve a problem for someone other than yourself, find a real person who has this problem. Talk to them and see how passionate they are about it. In our case, the person we spoke with at the Community &amp; Economic Development Office was ecstatic about our proposed solution. This validated our idea and gave us confidence going into to the competition.</li>
<li><strong>Judges</strong> &ndash; Information about each judge was available on the <a href="http://hackvt.com/#details">HackVT website</a>. We discussed as a team what sort of things they might be looking for, and planned to account for this in our application. For example, <a href="http://cutroni.com/blog/">Justin Cutroni</a> works on the Google Analytics team, and we assumed that analyzing and simplifying complex data was something he is passionate about.</li>
<li><strong>Technology</strong> &ndash; Spending time up front discussing and researching technologies is well worth the effort. After choosing an idea, we made a list of all the potential tools we might need to build it. Members of our team had overlapping skill sets so we were able to make some important decisions before the competition began.</li>
<li><strong>How to win a hackathon</strong> &ndash; We even spent some time researching <a href="http://news.ycombinator.com/item?id=4345295">how other people won hackathons</a>.</li>
</ul>


<h2>Execution</h2>

<p>Given the amount of upfront work we did, we were able to start the hackathon with confidence and direction. We knew who was doing what, and essentially hit the ground running. We made a couple mistakes along the way and had to pivot a few times, but overall we were able to stay focused on our goal and finish within the allotted time.</p>

<p><img src="http://petebrown-pics.s3.amazonaws.com/public/datamorphosis-at-work.jpg" alt="Datamorphosis team at work" /></p>

<h3>What we learned:</h3>

<ul>
<li><strong>Start early</strong> &ndash; Though the hackathon didn’t officially kick off until 6PM, they allowed teams to set up and start coding at 3pm. These early hours in the competition are critical. Everyone is awake and can make reasonable decisions, and being there early makes things a little less stressful.</li>
<li><strong>Avoid perfection</strong> &ndash; This is a hackathon, and it’s ok to write hacky code. People who know me or have seen some of <a href="https://speakerdeck.com/beerlington">my presentations</a> know that I’m a stickler for good code. Building a production application for your customers is one thing, but hacking something in 24 hours for a three minute presentation is another. Put aside your pride and just get it done.</li>
<li><strong>Focus on the core</strong> &ndash; Since you will likely run into unexpected hiccups along the way, focus on building the core first and iterate on it. Will your application still function and be presentable without feature X? If so, it’s a low priority. In our case, showing data on a time-lapse map was the core of our application. Without this, it would not have met our goals. We tracked a list of our priorities on a whiteboard and delegated each task in order of importance. By focusing on these must-have features, we were able to have a simple application that was easy to finish and demonstrate.</li>
<li><strong>Don’t panic</strong> &ndash; When we are tired and under stress, we tend to make bad decisions. Our team encountered a serious bug in the final hour and realized we didn’t have time to fix it, so we prepared our presentation accordingly. We spent our last 30 minutes planning a path to walk through the application that we knew we could demonstrate with confidence.</li>
<li><strong>Know when to cut a feature</strong> &ndash; This goes along with focusing on core functionality. Some features will take up too much of your time and don’t add enough value. If it doesn’t feel right, cut your losses and move on. We had a few awesome features that we decided to axe at the last minute. If you’ve prioritized your todo list, the tasks ranked as “nice to have” will likely get pulled.</li>
<li><strong>Design for presentation</strong> &ndash; Chances are, your application is going to look 100x worse on a large, lower contrast projector screen during the presentation. We planned for this by using large, readable fonts and designing simple interface. If the judges can’t make out what it is, it will just be visually distracting.</li>
<li><strong>Asynchronous communication</strong> &ndash; Even when we were sitting at the same table during the event, we continued using Flowdock to communicate. We found this asynchronous form of communication to be vital to our productivity, allowing people to propose ideas, share links, and notify others about code changes, without breaking from their workflow.</li>
<li><strong>Don’t bother with user authentication</strong> &ndash; No one cares that you added a 3rd party authentication system to your app. If your application isn’t secure for the presentation, this is actually a good thing because you won’t be wasting valuable time trying to remember your password.</li>
</ul>


<h2>Presentation</h2>

<p>In planning for the event, we anticipated having at least five minutes to present our idea. It turned out we only had three. Three minutes is not a lot of time for anything, let alone present a problem, solution and walk through a software demo. Every second is valuable and should be spent selling your idea to the judges.</p>

<p><img src="http://petebrown-pics.s3.amazonaws.com/public/presenting-at-hackvt.jpg" alt="presenting at HackVT" /></p>

<h3>Here are some tips for nailing the presentation:</h3>

<ul>
<li><strong>Get some rest</strong> &ndash; With a five person team, we had the luxury of making sure the people representing our team were well rested. Only two of my teammates actually coded through the night. It’s easy to make stupid mistakes when you’re tired, and you don’t want to blow all your hard work in the last 3 minutes.</li>
<li><strong>Practice your pitch</strong> &ndash; Our presenters spent hours preparing for the demo. They practiced what they were going to say and how everything was going to flow. This extra effort definitely paid off in the end.</li>
<li><strong>Don’t talk about the technology</strong> &ndash; You’re here to brag about your application, not about the tools you used. If people are interested in what you built it in, they will ask.</li>
<li><strong>No one built a perfect application</strong> &ndash; I’m sure everyone’s application had at least one embarrassing bug. Ours had at least three that we were aware of. Don’t apologize and bring attention to these faults, the judges probably won’t even notice. We planned our demo to avoid these issues, and no one besides us knew they existed.</li>
<li><strong>Focus on your product</strong> &ndash; Don’t rely on presentation slides to help sell your app. Though most of the judges looked well rested, everyone else is tired and just wants to see your application in action.</li>
<li><strong>Just because you built it, doesn’t mean you have to show it</strong> &ndash; There were quite a few features we developed that did not even get mentioned during our demo. They would have been great to show off if we had a few more minutes, but they were not polished and did not really add core value.</li>
</ul>


<h2>Technologies Used</h2>

<ul>
<li><a href="https://flowdock.com/">Flowdock</a></li>
<li><a href="https://github.com/">Github</a></li>
<li><a href="http://rubyonrails.org/">Ruby on Rails</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine">OpenRefine</a> (formerly Google Refine)</li>
<li><a href="http://backbonejs.org/">Backbone.js</a></li>
<li><a href="http://jquery.com/">jQuery</a></li>
<li><a href="http://leaflet.cloudmade.com/">LeafLet</a></li>
<li><a href="http://ivaynberg.github.com/select2/">Select2</a></li>
<li><a href="http://activeadmin.info/">ActiveAdmin</a></li>
<li><a href="http://www.postgresql.org/">PostgreSQL</a> and <a href="http://postgresapp.com/">Postgres.app</a></li>
<li><a href="http://www.rubygeocoder.com/">Geocoder</a> (Ruby gem)</li>
</ul>


<h2>Final Thoughts</h2>

<p>Winning the hackathon means so much more to our team than the cash or prizes. HackVT was by far the most well organized Vermont event I have ever attended. Every last detail, from the quality of food to the mounted, decorative data sets, made the developers feel welcome and comfortable during our 24 hour stay. This event demonstrated the level of commitment that companies like MyWebGrocer and Dealer.com have made to Vermont, ensuring our state becomes a sustainable technology hub and attract talented individuals for years to come. Thank you to all the volunteers, sponsors, and participants who made it happen. See you again in 2013!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Custom CSV Renderer in Rails 3]]></title>
    <link href="http://beerlington.github.io/blog/2011/07/25/building-a-csv-renderer-in-rails-3/"/>
    <updated>2011-07-25T22:18:00-04:00</updated>
    <id>http://beerlington.github.io/blog/2011/07/25/building-a-csv-renderer-in-rails-3</id>
    <content type="html"><![CDATA[<p>This post will walk you through creating a simple renderer in Rails
3.</p>

<h2>What are renderers?</h2>

<p>A renderer in Rails is a way of customizing how content is rendered for
the browser or any client interacting with your web service. Rails has
a handful of built in rendering formats such as <em>html</em>, <em>xml</em>, and
<em>json</em>, and exposes an effortless method for adding additional custom rendering
functionality that can be shared among your controllers and
applications.</p>

<p>Custom renderers provide a standard, reusable interface for rendering content,
in turn allowing you to DRY up your application logic architecture.
This post will show you how to add a custom renderer that converts
ActiveRecord collections to a downloadable CSV format.</p>

<p>Below is an example of how the final CSV renderer will be used:</p>

<figure class='code'><figcaption><span>CSV rendering from a controller - app/locations_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@locations</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">csv</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:csv</span> <span class="o">=&gt;</span> <span class="vi">@locations</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Some background info:</h2>

<p>Before getting started with our CSV renderer, let&rsquo;s look at the
<a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/metal/renderers.rb">Rails source</a>
to see how it defines its own custom renderers:</p>

<figure class='code'><figcaption><span>actionpack/lib/action_controller/metal/renderers.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">ActionController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add_renderer</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Renderers</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Renderers</span>
</span><span class='line'>    <span class="c1"># Lots of ommitted code...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="n">define_method</span><span class="p">(</span><span class="s2">&quot;_render_option_</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="no">RENDERERS</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="n">block</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># More ommitted code...</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">add</span> <span class="ss">:xml</span> <span class="k">do</span> <span class="o">|</span><span class="n">xml</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">content_type</span> <span class="o">||=</span> <span class="ss">Mime</span><span class="p">:</span><span class="ss">:XML</span>
</span><span class='line'>      <span class="n">xml</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:to_xml</span><span class="p">)</span> <span class="p">?</span> <span class="n">xml</span><span class="o">.</span><span class="n">to_xml</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="n">xml</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top you see an <em>add_renderer</em> method, which will be our
interface to add a custom renderer. Ignoring the fact that
I&rsquo;ve removed some of the implementation details,
further down you see a class method called <em>add</em> which does two things:
1) It defines an internal method used by the rendering stack,
and 2) stores the key (:xml, :json, etc) in a hash.</p>

<p>As we move to the bottom of this file, you&rsquo;ll see where <em>add</em> is being used
to define an XML renderer. This method takes a block with two arguments.
The first argument is an object that responds to <em>to_xml</em>, and the second
is a set of options that are passed as arguments to <em>to_xml</em>. If for some reason
the object doesn&rsquo;t respond to <em>to_xml</em> then it simply returns itself.</p>

<p>If you&rsquo;ve ever used the Rails scaffold generator, you will notice that
it includes code for responding to XML requests:</p>

<figure class='code'><figcaption><span>default scaffolded controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@location</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="c1"># show.html.erb</span>
</span><span class='line'>    <span class="nb">format</span><span class="o">.</span><span class="n">xml</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:xml</span> <span class="o">=&gt;</span> <span class="vi">@location</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is exacly what adding the XML renderer has provided, a clean syntax
for allowing the server to respond with XML formatted data.</p>

<h2>Why should I use it?</h2>

<p>Let&rsquo;s say you have a <em>Location</em> model with the
following schema:</p>

<figure class='code'><figcaption><span>db/schema.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">:version</span> <span class="o">=&gt;</span> <span class="mi">20110726022558</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="s2">&quot;locations&quot;</span><span class="p">,</span> <span class="ss">:force</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;name&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;address&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;city&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;state&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="s2">&quot;zip&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;created_at&quot;</span>
</span><span class='line'>    <span class="n">t</span><span class="o">.</span><span class="n">datetime</span> <span class="s2">&quot;updated_at&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although your main application may use all of these fields, you might need to
import this data into some sort of enterprise/exchange-powered legacy
system in CSV format. You could easily define a <em>to_csv</em> class method on your
Location model and just call that from the controller, but that presents
a few problems. The Location model shouldn&rsquo;t know anything
about converting itself to a CSV format because this violates the rule that
components should have a single, well-defined purpose. Also, what if you want to
download other models in CSV format? These are problems that respond_to and render
aim to solve.</p>

<h2>How does it work?</h2>

<p>Looking back to the first code snippet I posted, you can see that the
CSV render syntax in my controller is very similar to the XML render syntax. The only difference is
that our CSV format allows you to specify which columns (attributes) you
want to include or exclude in the downloaded CSV file. This detail has
almost nothing to do with the renderer itself, and is implemented by
the object&rsquo;s Array class, as shown below.</p>

<p>To understand how this works, let&rsquo;s look at our custom CSV renderer:</p>

<figure class='code'><figcaption><span>csv_renderer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_controller/metal/renderers&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActionController</span><span class="o">.</span><span class="n">add_renderer</span> <span class="ss">:csv</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">response_body</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:to_csv</span><span class="p">)</span> <span class="p">?</span> <span class="n">csv</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="p">:</span> <span class="n">csv</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will notice a few differences between our custom renderer
and the XML renderer defined by Rails. First, we are using
<em>add_renderer</em> as opposed to just <em>add</em>. This is a personal preference
as you can also use: <code>ActionController::Renderers.add
:csv</code>. Both methods accomplish exactly the same thing, but I find
<em>add_renderer</em> to be slightly more readable.
Second, we are not setting the content_type. The
reason for this is because Rails automatically adds a CSV Mime Type
within the action_pack library. I&rsquo;m not going to go into the details of how that
works, but feel free to <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_dispatch/http/mime_types.rb">explore the complete list of Mime Types</a>.
The last detail to note is that we are requiring
<em>action_controller/metal/renderers</em> which provides us access to the <em>add_renderer</em>
method. You could alternatively require any module that inclues this
file, such as <em>action_controller/base</em> if you need access to methods like
<a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html#method-i-send_data">send_data</a>.</p>

<p>Finally, let&rsquo;s look at the <em>to_csv</em> Array method. The
reason this method is defined on Array is because ActiveRecord converts
collection queries such as <code>Location.where(:state =&gt; 'vt')</code> or <code>Location.all</code>
to arrays.</p>

<figure class='code'><figcaption><span>array.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Array</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Converts an array to CSV formatted string</span>
</span><span class='line'>  <span class="c1"># Options include:</span>
</span><span class='line'>  <span class="c1"># :only =&gt; [:col1, :col2] # Specify which columns to include</span>
</span><span class='line'>  <span class="c1"># :except =&gt; [:col1, :col2] # Specify which columns to exclude</span>
</span><span class='line'>  <span class="c1"># :add_methods =&gt; [:method1, :method2] # Include addtional methods that aren&#39;t columns</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_csv</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&#39;</span> <span class="k">if</span> <span class="n">empty?</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="k">unless</span> <span class="n">first</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:column_names</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">columns</span> <span class="o">=</span> <span class="n">first</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">column_names</span>
</span><span class='line'>    <span class="n">columns</span> <span class="o">&amp;=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:only</span><span class="o">]</span>
</span><span class='line'>    <span class="n">columns</span> <span class="o">-=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:except</span><span class="o">]</span>
</span><span class='line'>    <span class="n">columns</span> <span class="o">+=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:add_methods</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span> <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:add_methods</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">csv</span> <span class="o">=</span> <span class="o">[</span><span class="n">columns</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">csv</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">columns</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">csv</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Above we can see that <em>to_csv</em> takes a hash of options which are used to
determine which columns should be included in the CSV file. One
option <code>:only =&gt; [:col1, :col2]</code> allows you to specify the exact
columns you want included, another option, <code>:except =&gt; [:col1, :col2]</code>,
allows you to specify which columns you DO NOT want to include, and the
last option, <code>:add_methods =&gt; [:method1, :method2]</code> allows you to add
data defined in methods that aren&rsquo;t saved in the database. Calling
<em>to_csv</em> without any arguments will include all columns.</p>

<h2>Usage examples:</h2>

<p>Tying that all together, we can now use this renderer in our controllers
to let users or clients download CSV data. Here are a few examples:</p>

<h3>Generate a CSV that includes every column:</h3>

<figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@locations</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">csv</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:csv</span> <span class="o">=&gt;</span> <span class="vi">@locations</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate a CSV that includes every column except the id:</h3>

<figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@locations</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">csv</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:csv</span> <span class="o">=&gt;</span> <span class="vi">@locations</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:id</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate a CSV that includes only the state and zipcode:</h3>

<figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@locations</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">csv</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:csv</span> <span class="o">=&gt;</span> <span class="vi">@locations</span><span class="p">,</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:state</span><span class="p">,</span> <span class="ss">:zip</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Generate a CSV that adds a model method:</h3>

<figure class='code'><figcaption><span>app/controllers/location_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">LocationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@locations</span> <span class="o">=</span> <span class="no">Location</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">csv</span>  <span class="p">{</span> <span class="n">render</span> <span class="ss">:csv</span> <span class="o">=&gt;</span> <span class="vi">@locations</span><span class="p">,</span> <span class="ss">:add_methods</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:my_method</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Finishing up</h2>

<p>This post walked you through a simple yet practical approach to building
a custom Rails renderer in Rails 3. While it may be overkill for one-off
uses in a small code base, it shows it&rsquo;s true potential in large
applications by helping prevent redundant code, and for building APIs that may need to
respond to formats other than JSON and XML.</p>

<h2>Additional Resources</h2>

<p>All the code used in this post was developed for a RubyGem called <a href="https://github.com/beerlington/render_csv">render_csv</a>.
For more information about renderers and the Rails rendering stack, I highly recommend
<a href="http://pragprog.com/book/jvrails/crafting-rails-applications">Crafting Rails Applications</a>
 by <a href="https://twitter.com/josevalim">José Valim</a>. Also, the <a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Layouts and Rendering Rails Guide</a>
provides a comprehensive overview of rendering in controllers as well as
views.</p>
]]></content>
  </entry>
  
</feed>
